parameters:
- name: DoCompliance
  displayName: Run Compliance Tasks?
  type: boolean
  default: true

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: EnvSetupScript
  displayName: Package name for nuget
  type: string

- name: buildArch
  displayName: Package name for nuget
  type: string

- name: msbuildPlatform
  displayName: Package name for nuget
  type: string

- name: packageName
  displayName: Package name for nuget
  type: string

- name: buildparameter
  displayName: Package name for nuget
  type: string

- name: runTests
  type: boolean
  default: true

- name: job_name_suffix
  displayName: job name for nuget
  type: string
  default: ''

- name: ort_build_pool_name
  displayName: job name for nuget
  type: string
  default: 'Win-CPU-2021'

jobs:
- job: Windows_Packaging_${{ parameters.job_name_suffix }}
  workspace:
    clean: all
  pool: ${{ parameters.ort_build_pool_name }}
  timeoutInMinutes:  300  
  steps:
    - template: telemetry-steps.yml
    
    - task: UsePythonVersion@0
      inputs: 
        versionSpec: '3.7' 
        addToPath: true 
        architecture: ${{ parameters.buildArch }}

    - task: BatchScript@1
      displayName: 'setup env'
      inputs:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\${{ parameters.EnvSetupScript }}'
        modifyEnvironment: true
        workingFolder: '$(Build.BinariesDirectory)'

    - script: |
       python -m pip install -q pyopenssl setuptools wheel numpy
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Install python modules' 
    - powershell: |
       $Env:USE_MSVC_STATIC_RUNTIME=1
       $Env:ONNX_ML=1
       $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.buildArch }}-windows-static"
       python setup.py bdist_wheel
       python -m pip uninstall -y onnx -qq
       Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}   
      workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'      
      displayName: 'Install ONNX'    

    - template: set-version-number-variables-step.yml

    - task: PythonScript@0
      displayName: 'Generate cmake config'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --disable_rtti --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019"  --build_shared_lib --enable_onnx_tests $(TelemetryOption) ${{ parameters.buildparameter }}'
        workingDirectory: '$(Build.BinariesDirectory)'
 
    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        platform: ${{ parameters.msbuildPlatform }}
        configuration: RelWithDebInfo
        msbuildArchitecture: ${{ parameters.buildArch }}
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true

    - task: PythonScript@0
      displayName: 'test'
      condition: and(succeeded(), eq('${{ parameters.runTests}}', true))
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --disable_rtti --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019"  --build_shared_lib --enable_onnx_tests  $(TelemetryOption) ${{ parameters.buildparameter }}'
        workingDirectory: '$(Build.BinariesDirectory)'

    - script: |
       dir *.dll
       mkdir $(Build.ArtifactStagingDirectory)\testdata
      workingDirectory: '$(Build.BinariesDirectory)/RelWithDebInfo/RelWithDebInfo'
      displayName: 'List built DLLs' 

    - template: c-api-artifacts-package-and-publish-steps-windows.yml
      parameters:
        buildConfig: RelWithDebInfo
        artifactName: 'onnxruntime-win-${{ parameters.packageName }}-$(OnnxRuntimeVersion)'
        artifactNameNoVersionString: 'onnxruntime-win-${{ parameters.packageName }}'
        commitId: $(OnnxRuntimeGitCommitHash)
        DoEsrp: ${{ parameters.DoEsrp }}

    #Upload protoc.exe, which will be used in nuget build for generating C# files
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq('${{ parameters.packageName}}', 'x64'))
      inputs:
        targetPath: '$(Build.BinariesDirectory)\RelWithDebInfo\external\protobuf\cmake\RelWithDebInfo\protoc.exe' 
        artifactName: 'drop-extra' 

    - task: CopyFiles@2
      displayName: 'Copy custom_op_library to: $(Build.ArtifactStagingDirectory)'
      condition: and(succeeded(), eq('${{ parameters.packageName}}', 'x64'))
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
        Contents: 'custom_op_library.dll'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/testdata'

    #To be used in test_win.yml
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq('${{ parameters.packageName}}', 'x64'))
      inputs:
        targetPath: '$(Build.BinariesDirectory)\RelWithDebInfo\external\protobuf\cmake\RelWithDebInfo\protoc.exe' 
        artifactName: 'drop-nuget'

    - ${{ if eq(parameters['DoCompliance'], 'true') }}:
      - task: CredScan@3
        displayName: 'Run CredScan'
        inputs:
          debugMode: false
        continueOnError: true

      - task: BinSkim@4
        displayName: 'Run BinSkim'
        inputs:
          AnalyzeTargetGlob: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\**\*.dll'
        continueOnError: true

      - task: DeleteFiles@1
        displayName: 'Delete files from $(Build.BinariesDirectory)\RelWithDebInfo'
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
          Contents: |
           **/*.obj
           **/*.pdb
           **/*.dll
          
      #Manually set msBuildCommandline so that we can also set CAExcludePath
      - task: SDLNativeRules@3
        displayName: 'Run the PREfast SDL Native Rules for MSBuild'
        condition: and (succeeded(), eq(variables['msbuildPlatform'], 'x64'))
        inputs:
          msBuildArchitecture: amd64
          setupCommandlines: 'python $(Build.SourcesDirectory)\tools\ci_build\build.py --config Debug --disable_rtti --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019"  --build_shared_lib --enable_onnx_tests  $(TelemetryOption) ${{ parameters.buildparameter }} --cmake_extra_defines onnxruntime_ENABLE_STATIC_ANALYSIS=ON'
          msBuildCommandline: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64\msbuild.exe" "$(Build.BinariesDirectory)\Debug\onnxruntime.sln" /p:platform="$(MsbuildPlatform)" /p:configuration=Debug /p:VisualStudioVersion="16.0" /m /p:PreferredToolArchitecture=x64'
          excludedPaths: '$(Build.BinariesDirectory)#$(Build.SourcesDirectory)\cmake#C:\program files (x86)'

      - task: TSAUpload@2
        displayName: 'TSA upload'
        condition: and (succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          GdnPublishTsaOnboard: false
          GdnPublishTsaConfigFile: '$(Build.sourcesDirectory)\.gdn\.gdntsa'
        continueOnError: true

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'

    - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
      displayName: 'Clean Agent Directories'
      condition: always()
