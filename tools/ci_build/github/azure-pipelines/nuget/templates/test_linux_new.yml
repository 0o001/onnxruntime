parameters:
  AgentPool: 'Linux-CPU'
  ArtifactSuffix: ''
  NugetPackageName : ''

jobs:
- job: NuGet_Test_Linux_${{ parameters.ArtifactSuffix }}
  workspace:
    clean: all
  timeoutInMinutes:  120
  pool: ${{ parameters.AgentPool }}
  #dependsOn:
  #- NuGet_Packaging_${{ parameters.ArtifactSuffix }}
  condition: succeeded()
  variables:
  - name: OnnxRuntimeBuildDirectory
    value: '$(Build.BinariesDirectory)'
  steps:

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Signed NuGet'
    inputs:
      source: 'specific'
      project: 'Lotus'
      pipeline: '940'
      runVersion: 'specific'
      runId: '169395'
      artifactName: drop-signed-nuget-${{ parameters.ArtifactSuffix }}
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Linux CustomOp TestData'
    inputs:
      source: 'specific'
      project: 'Lotus'
      pipeline: '940'
      runVersion: 'specific'
      runId: '169395'
      artifactName: 'drop-linux'
      targetPath: '$(Build.BinariesDirectory)/testdata'

  - template: get-nuget-package-version-as-variable.yml
    parameters:
      packageFolder: '$(Build.BinariesDirectory)/nuget-artifact'

  - task: CmdLine@2
    displayName: 'Create symlink for test models'
    inputs:
      script: |     
         ln -sf /data/models $(Build.BinariesDirectory)

  - template: templates/set-version-number-variables-step.yml
  - template: templates/get-docker-image-steps.yml
      parameters:
        Dockerfile: tools/ci_build/github/linux/docker/Dockerfile.manylinux2014_cuda11_4_tensorrt8_0
        Context: tools/ci_build/github/linux/docker
        DockerBuildArgs: "--network=host --build-arg POLICY=manylinux2014 --build-arg PLATFORM=x86_64 --build-arg DEVTOOLSET_ROOTPATH=/opt/rh/devtoolset-9/root --build-arg PREPEND_PATH=/opt/rh/devtoolset-9/root/usr/bin: --build-arg LD_LIBRARY_PATH_ARG=/opt/rh/devtoolset-9/root/usr/lib64:/opt/rh/devtoolset-9/root/usr/lib:/opt/rh/devtoolset-9/root/usr/lib64/dyninst:/opt/rh/devtoolset-9/root/usr/lib/dyninst:/usr/local/lib64 --build-arg BUILD_UID=$( id -u )"
        Repository: onnxruntimecuda114xtrt80build
  - task: CmdLine@2
      inputs:
        script: |
          mkdir -p $HOME/.onnx
          docker run --gpus all -e CC=/opt/rh/devtoolset-9/root/usr/bin/cc -e CXX=/opt/rh/devtoolset-9/root/usr/bin/c++ -e CFLAGS="-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all" -e CXXFLAGS="-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all" -e NVIDIA_VISIBLE_DEVICES=all -e OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) -e DisableContribOps=$(DisableContribOps) -e DisableMlOps=$(DisableMlOps) -e IsReleaseBuild=$(IsReleaseBuild) -e PACKAGENAME=${{ parameters.NugetPackageName }} -e BUILD_SOURCESDIRECTORY=/onnxruntime_src -e BUILD_BINARIESDIRECTORY=/build --rm --volume /data/onnx:/data/onnx:ro \
          --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build \
          --volume /data/models:/build/models:ro --volume $HOME/.onnx:/home/onnxruntimedev/.onnx -e NIGHTLY_BUILD onnxruntimecuda114xtrt80build \
          /onnxruntime_src/csharp/test/Microsoft.ML.OnnxRuntime.EndToEndTests/runtest.sh /build/nuget-artifact $(NuGetPackageVersionNumber)
        workingDirectory: $(Build.SourcesDirectory)

  - template: templates/component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'
  - template: templates/clean-agent-build-directory-step.yml
