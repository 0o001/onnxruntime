parameters:
  AgentPool : 'onnxruntime-gpu-tensorrt8-winbuild' 
  Skipx86Tests: 'false'

jobs:
- job: NuGet_Test_Win
  workspace:
    clean: all
  pool:
    name: 'onnxruntime-gpu-tensorrt8-winbuild' 
    demands: []
  #pool: ${{ parameters.AgentPool }}
  #dependsOn:
  #- NuGet_Packaging
  condition: succeeded()
  variables:
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    SKIPNONPACKAGETESTS: 'ON'
    runCodesignValidationInjection: false
    NugetArtifact: $(Build.BinariesDirectory)\nuget-artifact
    RunTestScript: test\Microsoft.ML.OnnxRuntime.EndToEndTests\runtest.bat
    DotNetCoreX64Args: ${{ variables.NugetArtifact }} netcoreapp2.1 x64 $(NuGetPackageVersionNumber)
    DotNetCoreX86Args: ${{ variables.NugetArtifact }} netcoreapp2.1 x86 $(NuGetPackageVersionNumber)
    DotNetFrameworkX64Args: ${{ variables.NugetArtifact }} net461 x64 $(NuGetPackageVersionNumber)
    DotNetFrameworkX86Args: ${{ variables.NugetArtifact }} net461 x86 $(NuGetPackageVersionNumber)

  steps:
  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      architecture: x64

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 5.7.0
    inputs:
      versionSpec: 5.7.0

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\setup_env_gpu.bat'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - task: BatchScript@1
    displayName: 'Setup VS2019 env vars'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
      arguments: 'amd64'
      modifyEnvironment: true

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact'
    inputs:
      source: 'specific'
      project: 'Lotus'
      pipeline: '963'
      runVersion: 'specific'
      runId: '168159'
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.BinariesDirectory)\nuget-artifact'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact - testdata'
    inputs:
      source: 'specific'
      project: 'Lotus'
      pipeline: '963'
      runVersion: 'specific'
      runId: '168159'
      artifactName: 'drop-nuget'
      targetPath: '$(Build.BinariesDirectory)\testdata'
  
  #- task: DownloadPipelineArtifact@0
    #displayName: 'Download Pipeline Artifact'
    #inputs:
      #artifactName: 'drop-signed-nuget'
      #targetPath: '$(Build.BinariesDirectory)\nuget-artifact'

  #- task: DownloadPipelineArtifact@0
    #displayName: 'Download Pipeline Artifact - testdata'
    #inputs:
      #artifactName: 'drop-nuget'
      #targetPath: '$(Build.BinariesDirectory)\testdata'

  - template: get-nuget-package-version-as-variable.yml
    parameters:
      packageFolder: '$(Build.BinariesDirectory)\nuget-artifact'

  - script: |
     mklink /D /J models C:\local\models
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Create models link'

  # TODO: Add .Net Core AnyCPU test task

  - script: |
     @echo "Running Runtest.bat"
     ${{ variables.RunTestScript }} ${{ variables.DotNetCoreX64Args}}
    workingDirectory: '$(Build.SourcesDirectory)\csharp'
    displayName: 'Run End to End Test (C#) .Net Core x64'

  - ${{ if ne(parameters['Skipx86Tests'], 'true') }}:
      - script: |
         @echo "Running Runtest.bat"
         ${{ variables.RunTestScript }} ${{ variables.DotNetCoreX86Args}}
        workingDirectory: '$(Build.SourcesDirectory)\csharp'
        displayName: 'Run End to End Test (C#) .Net Core x86'

  # TODO: Add .Net Framework AnyCPU test task

  - script: |
     @echo "Running Runtest.bat"
     ${{ variables.RunTestScript }} ${{ variables.DotNetFrameworkX64Args}}
    workingDirectory: '$(Build.SourcesDirectory)\csharp'
    displayName: 'Run End to End Test (C#) .NetFramework x64'

  - ${{ if ne(parameters['Skipx86Tests'], 'true') }}:
      - script: |
         @echo "Running Runtest.bat"
         ${{ variables.RunTestScript }} ${{ variables.DotNetFrameworkX86Args}}
        workingDirectory: '$(Build.SourcesDirectory)\csharp'
        displayName: 'Run End to End Test (C#) .NetFramework x86'
        enabled: false

  - template: ../../templates/component-governance-component-detection-steps.yml
    parameters :
      condition : 'always'

  - template: ../../templates/clean-agent-build-directory-step.yml
