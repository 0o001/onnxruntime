resources:
  repositories:
  - repository: manylinux
    type: Github
    endpoint: Microsoft
    name: pypa/manylinux
    ref: 1a61614cabfd6b91c6afd6d9e172cc5b838c65fe

jobs:
- job: Linux_Build
  timeoutInMinutes: 120
  workspace:
    clean: all
  variables:
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    # cache docker image
    repository: 'onnxruntimecpubuildaten'
    dockerfilePath: 'tools/ci_build/github/linux/docker/Dockerfile.manylinux2014_cpu'
    TODAY: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
  pool: Linux-CPU-2019
  steps:
  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

  - checkout: self
    clean: true
    submodules: recursive

  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'

  - task: Cache@2
    displayName: Cache Docker Image Task
    inputs:
      key: 'docker | "$(Build.SourceBranch)" | "$(Build.SourceVersion)"'
      path: $(Pipeline.Workspace)/docker
      restoreKeys: |
        docker | "$(Build.SourceBranch)"
        docker |
      cacheHitVar: IMAGE_CACHE_RESTORED

  - script: |
      docker load -i $(Pipeline.Workspace)/docker/cache.tar
    displayName: Docker restore
    condition: and(not(canceled()), eq(variables.IMAGE_CACHE_RESTORED, 'true'))

  - ${{ if ne(variables.IMAGE_CACHE_RESTORED, 'true') }}:
    - template: templates/get-docker-image-steps.yml
      parameters:
        Dockerfile: tools/ci_build/github/linux/docker/Dockerfile.manylinux2014_aten_cpu
        Context: tools/ci_build/github/linux/docker
        DockerBuildArgs: "--build-arg BUILD_UID=$( id -u )"
        Repository: '$(repository)'
        UseImageCacheContainerRegistry: false

  - script: |
      set -ex
      mkdir -p $(Pipeline.Workspace)/docker
      docker save -o $(Pipeline.Workspace)/docker/cache.tar ${{variables.repository}}
      docker image ls
    displayName: Docker save
    condition: and(not(canceled()), or(failed(), ne(variables.IMAGE_CACHE_RESTORED, 'true')))

  - script: |
      echo $(Pipeline.Workspace)/docker
      ls -lah $(Pipeline.Workspace)/docker
    displayName: Display docker dir

  - template: templates/explicitly-defined-final-tasks.yml

  - script: |
      df -h
    displayName: check disk space
