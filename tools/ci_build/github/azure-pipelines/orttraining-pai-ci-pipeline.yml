trigger: none

name: 'orttraining_ci_$(Date:yyyyMMdd)_$(Rev:r)'
jobs:
- job: AMD_CI
  workspace:
    clean: all
  pool: 'AMD-GPU'
  timeoutInMinutes: 150

  # gid of video and render group on gcramdrr1-mi100-085 and -86
  variables:
    - name: video
      value: 44
    - name: render
      value: 109
    - name: onnxruntimeBuildSucceeded
      value: false
    - name: RocmVersion
      value: 5.5
    - name: CCACHE_DIR
      value: $(Pipeline.Workspace)/ccache
    - name: TODAY
      value: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]

  # generated from tools/ci_build/github/pai/rocm-ci-pipeline-env.Dockerfile
  container:
    image: onnxruntimecibuildenvironment.azurecr.io/rocm-ci-pipeline-env:rocm$(RocmVersion)
    endpoint: onnxruntimecibuildenvironmentforamd
    options: --privileged -e HIP_VISIBLE_DEVICES --security-opt seccomp=unconfined --shm-size=1024m --device=/dev/kfd --device=/dev/dri  --group-add $(video) --group-add $(render)

  steps:
  - checkout: self
    clean: true

  - script: |-
      echo "Selecting GPU based on HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES"
    displayName: 'Initialize environment'

  #- script: |-
  #    sed -i 's|session_options.use_deterministic_compute = False|session_options.use_deterministic_compute = True|g' \
  #       orttraining/orttraining/python/training/ortmodule/_graph_execution_manager.py
  #  displayName: 'Toggle ON deterministic compute mode for ORTModule'

  - task: CmdLine@2
    displayName: 'Check ROCm Environment'
    inputs:
      script: |-
        echo $(Agent.Name)
        bash ./tools/ci_build/github/pai/pai_get_thread.sh $(Agent.Name)
    target: host

  - task: Cache@2
    inputs:
      key: '"$(TODAY)" | "$(Build.SourceBranch)" | "$(Build.SourceVersion)"'
      path: $(CCACHE_DIR)
      cacheHitVar: CACHE_RESTORED
      restoreKeys: |
        "$(TODAY)" | "$(Build.SourceBranch)"
        "$(TODAY)" |
    displayName: Cache Task

  - script: mkdir -p $(CCACHE_DIR)
    condition: ne(variables.CACHE_RESTORED, 'true')
    displayName: Create Cache Dir

  - script: ccache -s && ccache -z
    displayName: Show Cache Stats Before Building

  - task: CmdLine@2
    inputs:
      script: |-
        export ROCM_HOME=/opt/rocm
        python tools/ci_build/build.py \
          --config Release \
          --enable_training \
          --mpi_home /opt/ompi \
          --cmake_extra_defines \
              CMAKE_HIP_COMPILER=${ROCM_HOME}/llvm/bin/clang++ \
              onnxruntime_BUILD_KERNEL_EXPLORER=ON \
          --use_cache \
          --use_rocm \
          --rocm_version=$(RocmVersion) \
          --rocm_home ${ROCM_HOME} \
          --nccl_home ${ROCM_HOME}\
          --update \
          --build_dir ./build \
          --build \
          --parallel 32 \
          --build_wheel \
          --skip_tests
    displayName: 'Build onnxruntime'

  - script: |
      ccache -sv
      ccache -z
    displayName: Show Cache Stats After Building

  - bash: |-
      echo "##vso[task.setvariable variable=onnxruntimeBuildSucceeded]true"
    displayName: 'Set Onnxruntime Build Succeeded'

  - task: CmdLine@2
    inputs:
      script: |-
        cd ./build/Release &&\
        ../../tools/ci_build/github/pai/pai_test_launcher.sh
    displayName: 'Run onnxruntime unit tests'

  - task: CmdLine@2
    inputs:
      script: |-
        export KERNEL_EXPLORER_BUILD_DIR=./build/Release
        pytest ./onnxruntime/python/tools/kernel_explorer/ -n 16 --reruns 1
    displayName: 'Run kernel explorer tests'
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true'))

  - task: CmdLine@2
    inputs:
      script: |-
        cd ./build/Release
        export PYTHONPATH=$PWD
        python -m onnxruntime.training.ortmodule.torch_cpp_extensions.install
    displayName: 'Compile torch extensions into build directory'
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true')) # ensure all tests are run when the build successed

  - task: CmdLine@2
    inputs:
      script: |-
        cd ./build/Release
        export PYTHONPATH=$PWD
        export ORTMODULE_ONNX_OPSET_VERSION=15
        python \
          /stage/huggingface-transformers/examples/pytorch/language-modeling/run_mlm.py \
          --model_name_or_path bert-large-uncased \
          --dataset_name wikitext \
          --dataset_config_name wikitext-2-raw-v1 \
          --do_train \
          --max_steps 260 \
          --logging_steps 20 \
          --output_dir ./test-mlm-bbu \
          --overwrite_output_dir \
          --per_device_train_batch_size 8 \
          --fp16 \
          --dataloader_num_workers 1 \
          --ort \
          --skip_memory_metrics
        python ../../orttraining/tools/ci_test/compare_huggingface.py \
          ci-pipeline-actual.json \
          ../../orttraining/tools/ci_test/results/ci-mi100.huggingface.bert-large-rocm$(RocmVersion).json
    displayName: 'Run Python Hugging-Face BERT-L test'
    retryCountOnTaskFailure: 1
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true')) # ensure all tests are run when the build successed

  - task: CmdLine@2
    inputs:
      script: |-
        cd ./build/Release
        export PYTHONPATH=$PWD
        export ORTMODULE_ONNX_OPSET_VERSION=15
        python \
          /stage/huggingface-transformers/examples/pytorch/language-modeling/run_clm.py \
          --model_name_or_path gpt2 \
          --dataset_name wikitext \
          --dataset_config_name wikitext-2-raw-v1 \
          --do_train \
          --label_smoothing 0.1 \
          --max_steps 260 \
          --logging_steps 20 \
          --overwrite_output_dir \
          --output_dir ./test-clm \
          --per_device_train_batch_size 8 \
          --fp16 \
          --dataloader_num_workers 1 \
          --ort \
          --skip_memory_metrics
        python ../../orttraining/tools/ci_test/compare_huggingface.py \
          ci-pipeline-actual.json \
          ../../orttraining/tools/ci_test/results/ci-mi100.huggingface.gpt2-rocm$(RocmVersion).json
    displayName: 'Run Python Hugging-Face GPT2 test'
    retryCountOnTaskFailure: 1
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true')) # ensure all tests are run when the build successed

 - task: CmdLine@2
    inputs:
      script: |-
        cd ./build/Release
        export PYTHONPATH=$PWD
        export ORTMODULE_ONNX_OPSET_VERSION=15
        python \
          /stage/huggingface-transformers/examples/pytorch/language-modeling/run_mlm.py \
          --model_name_or_path distilbert-base-uncased \
          --dataset_name wikitext \
          --dataset_config_name wikitext-2-raw-v1 \
          --do_train \
          --max_steps 260 \
          --logging_steps 20 \
          --output_dir ./test-mlm-bbu \
          --overwrite_output_dir \
          --per_device_train_batch_size 32 \
          --fp16 \
          --dataloader_num_workers 1 \
          --ort \
          --skip_memory_metrics
        python ../../orttraining/tools/ci_test/compare_huggingface.py \
          ci-pipeline-actual.json \
          ../../orttraining/tools/ci_test/results/ci-mi100.huggingface.distilbert-base-rocm$(RocmVersion).json
    displayName: 'Run Python Hugging-Face DistilBERT test'
    retryCountOnTaskFailure: 1
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true')) # ensure all tests are run when the build successed



  - script: |
      sudo apt-get update
      sudo apt install -y cifs-utils
    displayName: 'Install filesystems util'
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true'))

  - bash: tools/ci_build/github/linux/docker/scripts/training/azure_scale_set_vm_mount_test_data.sh -p $(orttrainingtestdatascus-storage-key) -s "//orttrainingtestdatascus.file.core.windows.net/mnist" -d "/mnist"
    displayName: 'Mount MNIST'
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true'))

  - bash: tools/ci_build/github/linux/docker/scripts/training/azure_scale_set_vm_mount_test_data.sh -p $(orttrainingtestdatascus-storage-key) -s "//orttrainingtestdatascus.file.core.windows.net/bert-data" -d "/bert_data"
    displayName: 'Mount bert-data'
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true'))

  - bash: tools/ci_build/github/linux/docker/scripts/training/azure_scale_set_vm_mount_test_data.sh -p $(orttrainingtestdatascus-storage-key) -s "//orttrainingtestdatascus.file.core.windows.net/hf-models-cache" -d "/hf_models_cache"
    displayName: 'Mount hf-models-cache'
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true'))


  # Entry point for all ORTModule tests
  # The onnxruntime folder is deleted in the build directory
  # to enforce use of the onnxruntime wheel
  - task: CmdLine@2
    inputs:
      script: |-
        cd ./build/Release
        unset PYTHONPATH
        rm -rf onnxruntime
        pip install ./dist/onnxruntime*.whl
        python -m onnxruntime.training.ortmodule.torch_cpp_extensions.install
        python orttraining_ortmodule_tests.py \
          --mnist /mnist \
          --bert_data /bert_data/hf_data/glue_data/CoLA/original/raw \
          --transformers_cache /hf_models_cache/huggingface/transformers
    displayName: 'Run orttraining_ortmodule_tests.py'
    condition: and(succeededOrFailed(), eq(variables.onnxruntimeBuildSucceeded, 'true'))
