// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// #if defined(USE_CUDA) && defined(CUDA_VERSION) && CUDA_VERSION >= 11000

#include "gtest/gtest.h"
#include "test/common/tensor_op_test_utils.h"
#include "test/common/cuda_op_test_utils.h"
#include "test/providers/provider_test_utils.h"
#include "test/util/include/scoped_env_vars.h"
#include "contrib_ops/cpu/bert/longformer_attention_base.h"

#include <numeric>
#include <functional>
#include <iostream>
#include <math.h>

namespace onnxruntime {
namespace test {

enum OrderCublasLt {
  ORDER_COL = 0,
  ORDER_ROW = 1,
  ORDER_COL32 = 2,
  ORDER_COL4_4R2_8C = 3,
  ORDER_COL32_2R_4R4 = 4
};

const int64_t batch_size = 1;
const int64_t sequence_len = 16;
const int64_t input_hidden_size = 32;
const int64_t num_heads = 2;
const int64_t head_size = 16;
const int64_t hidden_size = num_heads * head_size;

float input_scale = 0.02845571f;
std::vector<int32_t> input_mask = {  // [1, 16]
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0};

std::vector<int8_t> inputq = {  // [1, 16, 32]
    -33, 7, -54, 29, 13, 6, 14, 16, 1, 16, 21, 0, 16, 49, -14, -15, 67, 10, -17, -9, -42, 6, 5, 57, 21, 30, 0, -12, 42, 39, 4, 0,
    -47, -49, -13, -29, 11, -11, -33, 78, 13, -32, 65, 26, -16, 23, 2, -3, -6, -13, 31, 24, 3, -3, -13, -34, 66, 17, -42, 64, -17, 5, -10, 36,
    -9, 2, -51, 14, 97, 17, 71, 114, 75, -69, -16, 2, -22, -28, 34, 39, 78, -12, 5, -6, 21, -15, 12, -63, 8, -11, -9, -48, -6, 45, -52, 23,
    56, 13, -54, 4, -80, 48, -21, 72, 1, 32, 0, 25, -15, -15, -36, -27, 55, -56, 12, -51, 37, 11, 62, -32, -38, -5, -5, 8, -19, -44, -46, -9,
    40, -26, -20, 18, 0, 21, -2, -5, 57, 95, -27, -3, 12, -51, -62, -8, 2, -13, -33, -40, -23, 20, 50, -22, -56, -28, -45, 44, 0, 17, 23, 0,
    9, -50, -21, 23, -4, 44, 53, 11, 4, 49, -37, 11, -8, 26, -57, 31, -42, -29, -18, 47, 7, -20, -21, -7, 21, 32, 50, -126, 32, -5, -6, -12,
    26, -11, 11, 24, 32, -93, 20, 14, 40, 50, -4, -66, -15, -9, 84, -39, -35, 1, -56, 36, -24, -48, 34, 65, -14, 23, 27, -38, 11, 19, -29, 9,
    10, 17, -49, 0, 28, -10, -18, -3, 37, 8, 14, -4, 58, -19, -22, -27, 5, -39, -47, -30, 18, 55, 65, 22, -22, 35, 31, 1, 19, -73, 37, 18,
    -34, 22, 31, 40, -5, 35, 18, 14, 2, 38, -19, -3, 14, 44, 70, 23, -40, 60, 41, -27, 87, 12, -14, -17, 6, 54, 28, 53, 16, -23, 38, 58,
    0, -28, -39, -19, -67, 33, 21, -80, -38, 8, 15, -38, 61, -25, -14, -12, 49, 8, 4, -4, 43, 27, 2, -54, -5, -46, -25, 58, 64, -9, 73, -5,
    -19, 7, -11, 20, -49, 53, 9, -41, 33, 0, 5, 26, 30, 20, -5, 16, -9, 21, -24, 23, -16, -24, 31, -2, 45, -22, 9, -44, 10, 62, -37, -33,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

std::vector<float> qw_scale = {  // [32]
    0.03020146f, 0.01355494f, 0.01573837f, 0.01611895f, 0.01811637f, 0.01048012f, 0.02108088f, 0.01882982f,
    0.01793966f, 0.01745927f, 0.01823013f, 0.01711889f, 0.02175285f, 0.02407503f, 0.01536436f, 0.02025108f,
    0.01872015f, 0.01633361f, 0.01533531f, 0.01647738f, 0.01517977f, 0.01836739f, 0.01335993f, 0.0150488f,
    0.01452327f, 0.01527704f, 0.01323918f, 0.02216707f, 0.02801262f, 0.01906153f, 0.02017113f, 0.02224589f};

std::vector<int8_t> weightq = {  // 32 x 32
    102, -18, -57, 35, 16, 45, -51, -95, 18, 39, 82, -5, 26, -69, -26, 82, 76, -44, -52, -20, 30, -33, 41, 11, 67, 22, 38, -59, 19, 82, 55, -21,
    -38, 6, 1, -29, -11, -52, 45, 76, 21, 19, -110, -1, 30, -101, -27, -37, -70, -2, 70, 13, 24, 82, 84, 47, -5, 84, 57, -11, -2, 57, 23, -5,
    13, 2, 126, 29, 10, 24, 19, 0, -41, -98, 99, 41, 0, -6, -46, -89, 87, -4, 0, -39, -63, -37, 7, -28, 47, -34, -37, -2, -34, -27, -28, -17,
    -33, -90, 55, -5, -12, -126, 36, 40, -63, 17, -106, -94, -52, -67, -102, 4, 31, -102, -32, 64, 54, 44, -70, -9, -89, 73, -2, -125, 28, 21, 13, -31,
    26, 67, 52, 36, 11, -74, -24, -126, -79, -34, -18, 87, -90, -27, -42, -63, -77, 3, 60, 118, 37, 39, 31, -97, -47, 38, 86, -1, -39, 26, 126, -102,
    126, 115, 22, 8, 91, -88, -58, -24, -20, -40, -36, 1, -46, 28, -89, 13, 31, -23, 14, -27, 78, -33, 56, -2, -37, 36, 4, -6, -30, 85, 6, 18,
    12, 26, 0, -18, 55, -81, -16, 1, 3, 26, 7, 104, -36, -44, 29, 13, 11, 57, -13, 82, 125, 59, -11, -78, -21, 61, -61, -55, -126, 16, -103, -19,
    7, 121, -4, -76, 25, -117, 11, 25, -88, 126, -14, 56, -49, 27, -79, -40, -37, -40, -61, -40, -126, -23, 61, -35, -44, 10, 72, -76, -112, 72, 19, 28,
    -19, 71, 26, -34, 51, -90, -75, 25, 23, -85, 23, 7, 16, -92, 64, -28, 23, -71, -23, 69, 42, 66, -34, -26, -36, -37, -38, 73, -16, 105, 44, 69,
    69, -89, -69, -32, 92, -56, 19, -10, 34, 1, 9, -111, -61, -11, -26, 85, -33, 57, -68, -63, 21, 41, -89, -30, 5, 13, 86, 32, -4, -47, 30, -48,
    1, -47, 14, -83, -22, 55, -49, 31, 12, 26, 43, 126, -12, 11, 40, 28, -54, 63, -7, 88, 125, 9, -75, -32, 38, 66, 123, -4, -39, -37, 94, 9,
    26, -54, -82, 16, 98, -64, -10, 84, 105, -41, 32, 11, -31, 52, 8, 70, -26, 117, 7, -50, -33, -15, -55, 59, 20, -9, -11, -10, 9, -26, 4, -102,
    42, -102, -112, -4, 31, -18, 23, 67, 7, -15, 3, 64, 36, 14, 0, -14, -37, 64, 14, -126, 10, 0, 80, 28, -32, 39, 45, -4, 52, -9, -25, 41,
    -61, 61, 58, 42, 17, 1, 29, -48, 13, -37, 7, -13, -85, 3, 6, 2, 21, -48, -64, 14, 63, 14, 31, 32, 20, 41, -18, 4, -20, -36, 13, 9,
    -53, -69, 87, -83, -126, 88, -13, -29, 126, 5, -112, -76, -6, -38, 0, 100, -44, 48, -115, 31, -18, -50, -29, 25, -126, -80, 68, 29, -35, -34, -75, -47,
    18, 16, -12, -53, 31, 16, 80, 31, 33, -49, -25, -18, -15, 4, 23, 66, -12, -38, -54, 68, 2, 74, 43, -100, -20, -4, 74, -15, -72, -16, 15, 32,
    -51, -24, -62, 13, -62, -47, -126, 18, -8, 8, 8, -52, 62, 32, 84, 10, -49, 0, -40, 75, -15, -6, -23, 59, 96, 70, -30, 9, -24, 70, -1, 60,
    70, -112, 46, 74, -86, 17, 77, -121, 53, -113, 105, -116, 59, 24, -10, 31, -16, -1, 89, -23, -75, 84, 3, -54, 9, -1, 23, -29, 27, -126, 51, 13,
    -8, 0, 4, 20, -23, -120, 75, 8, -61, -85, -21, -27, -44, 21, -8, -59, -84, 125, 65, -53, -82, -17, -19, 0, 4, 39, -30, 31, 68, -36, 5, -15,
    38, -44, 0, 13, -17, -3, 45, -87, 36, -100, 30, -75, -46, 2, -50, -3, 1, -32, -20, 72, -117, 126, -91, -9, 9, 69, 17, -109, 70, 33, -20, 9,
    15, 41, 6, 42, 79, 116, 13, 6, -4, -27, -67, 31, -18, 54, 49, -43, 48, 15, -21, 27, -71, 63, 30, 116, 60, -29, 37, -56, -61, 7, 1, -78,
    23, 68, -7, 82, 96, -53, 45, 29, 69, 13, -73, -12, 35, -74, -81, 73, -62, 22, -65, -1, -3, 16, 46, 64, -102, 35, 90, -28, 30, -73, 69, 28,
    -34, -106, 39, 39, 64, 13, 30, -10, -9, -24, -51, -19, 33, 13, 61, 62, 90, -29, 0, 56, 29, -77, -90, 109, -64, -9, -120, -2, 37, -57, 39, 103,
    1, -38, 13, -24, -24, 84, 10, -45, -9, -2, -24, 104, 48, -53, 3, 4, -29, 9, -28, 109, -105, 7, -85, -25, -98, 80, 72, -64, 30, 45, -10, -36,
    -22, -115, 95, -42, 22, 32, 35, 25, 6, 20, 26, -49, -8, -32, -2, 53, 115, 47, -74, -47, -76, -73, 1, 77, -35, 126, -47, -51, -72, -67, 34, 58,
    46, -44, -56, 117, -111, 119, -19, 4, 95, -23, 38, 71, -126, 13, 79, -51, 0, 50, 72, 50, -1, 66, -126, -126, 37, 113, -32, -34, 21, -19, 6, 58,
    8, 58, -59, 3, -19, 38, -3, 20, -2, -32, -75, 86, -49, -28, -126, 5, -81, -17, 48, -8, 78, 14, -30, -68, 21, -32, 76, -11, -3, 68, 2, 25,
    -5, -50, -74, 62, -105, -76, 24, -121, 17, 108, 2, 7, -12, 61, 36, 16, -46, 29, -47, -3, 46, -31, 54, 0, -34, 2, 3, -7, -25, 28, 112, 27,
    -34, -35, 119, 0, 56, -79, -65, -93, 77, 89, -26, -30, 15, -32, -41, 126, -74, 22, 23, 21, -63, 13, 29, -89, 45, 87, -10, -75, -25, -72, -3, -57,
    16, -24, 28, -126, 19, -1, 66, 62, 71, 43, 0, 87, -37, -108, -80, -54, 91, 48, 98, -95, 24, 44, 110, 18, -66, -29, 49, -33, -62, -26, 94, -44,
    -37, -126, 19, 1, -34, -20, -21, -33, 15, 66, 10, -9, 0, 17, 41, 40, -126, -16, 126, 27, -60, 21, -29, 36, 68, 12, -98, -73, 34, -40, 15, -31,
    85, 79, 40, 106, -4, -27, -33, -56, -5, -37, 125, 33, 54, 126, 54, 46, -33, -21, -55, -19, -36, -19, -23, -10, 77, -24, 126, -75, 80, -44, -65, -126};

std::vector<float> kw_scale = {
    0.01825544f, 0.01944645f, 0.01650337f, 0.01901278f, 0.01750382f, 0.01512746f, 0.01684955f, 0.02043665f,
    0.01695572f, 0.01770587f, 0.02110694f, 0.02284025f, 0.01371817f, 0.01468652f, 0.02191218f, 0.02365482f,
    0.01731688f, 0.01598582f, 0.01986111f, 0.01726722f, 0.01669624f, 0.01805956f, 0.01657886f, 0.01999545f,
    0.0151222f, 0.02473442f, 0.02092782f, 0.02067885f, 0.0141625f, 0.01441844f, 0.01650385f, 0.0110344f};

std::vector<int8_t> weightk = {
    -27, -125, -111, 21, 57, 98, 50, -31, -17, 10, -18, 126, -63, 1, -50, 52, -14, 58, 62, -18, 3, -87, 59, 1, 1, 37, -41, 31, -9, 59, 57, 118,
    -58, -92, -32, 1, -69, -4, 34, 33, -80, -42, 28, 25, -34, 78, -116, -1, 54, -57, -25, -12, -28, -75, 26, -31, 2, 60, -36, -48, -99, -30, 17, 77,
    -75, 46, 37, -46, -39, -46, -26, 23, -7, -22, -35, -17, 78, 99, -25, -9, 16, -126, -59, -15, 70, 58, -80, 60, 0, 20, -57, -2, 85, 55, 68, 90,
    -67, 43, -7, -24, -4, -15, -10, 51, 88, -118, -100, 29, -24, 46, -13, 53, 28, 50, 126, -7, -30, 3, -67, 83, -73, 53, 13, -10, -36, 32, -39, 47,
    17, -79, 67, -25, 32, 45, -40, -40, 6, 9, 54, 17, 42, -19, 40, -100, -29, 4, -97, 29, 0, -58, 16, -126, 9, 24, -17, -126, 47, 73, -18, 0,
    91, -3, 83, 5, 4, -68, 48, 54, -125, 43, -16, 37, 1, -30, 20, -47, 86, 108, 57, -37, 47, -16, 3, -106, 14, -12, -12, -9, -12, -69, 4, 11,
    80, 73, -8, 17, 24, 44, -93, -100, -11, 62, 77, -52, -19, 7, -6, 11, 84, 16, 1, -38, -33, -57, 38, -18, -14, -12, 16, 32, -39, 126, -120, -53,
    91, 124, -24, 6, 74, 14, 17, -10, 42, 12, -9, 43, -43, 60, 57, 34, 26, -37, 25, 31, 31, -41, -47, 2, -9, -75, -10, 72, -59, -3, -24, -126,
    53, 8, 116, 124, 64, 43, -54, 6, -55, 90, 112, -23, 27, -54, 27, 30, -31, 23, -25, -4, -126, -32, -126, 17, -50, 22, 75, 3, 65, -113, 1, -11,
    -63, 5, -107, -52, 19, 53, -19, 43, -33, -12, 98, -60, -30, -40, -34, -69, -54, 34, 15, 7, -14, -44, -17, -2, 81, 25, 4, -46, 12, 26, 12, 59,
    38, 84, 5, -35, -39, 37, -1, 4, -67, 6, -35, -38, -41, 17, 23, 24, -50, -85, -45, 3, -92, -45, -3, 61, -9, -40, -14, -61, 47, 13, -64, 5,
    16, 33, -24, 48, 16, -126, 29, 7, 72, 13, -24, 10, 126, -16, 38, -32, 89, -6, -62, -38, 44, -5, 46, -38, 34, 22, 4, 11, 15, 88, 3, -43,
    28, -12, -20, -17, 47, -49, 39, -101, -70, 23, -4, 35, -52, -34, 12, 40, 19, -29, 31, 15, 95, 46, -10, 6, 18, 52, -15, -82, -44, -22, -126, 10,
    -126, -29, 0, 39, 26, -5, 52, -2, -59, 88, 4, -32, 85, 41, 94, -7, -47, 46, -15, -3, 67, 14, -90, 4, -45, -39, -27, 118, -37, 22, 11, -22,
    -39, 58, -17, 29, -44, -108, 17, -34, 126, 39, 13, -17, 59, -26, 21, -27, 84, -54, -81, -28, -77, -45, -4, -10, 38, -2, 10, -73, -126, -70, 21, 7,
    41, -59, -46, -35, 0, -108, 35, 48, 54, 24, 119, -1, -67, -78, 38, -14, -31, -41, 79, -59, -80, -4, 52, 64, -13, 4, 21, 22, -74, -23, -49, -45,
    -73, -51, 51, -19, 22, -80, 39, 47, 23, 61, 19, -104, -29, -78, 35, 13, 0, -82, 94, 0, -72, -64, 18, 72, 15, 17, -55, -30, 120, -37, 27, 105,
    -33, -36, 41, 65, -4, 41, -125, -83, 11, -14, 82, -64, -108, -45, 9, -14, 69, 101, 15, -28, 42, 10, 114, -11, -15, 47, 0, -79, 64, 121, 13, -57,
    2, -108, -4, -20, 20, 14, 19, -35, 86, 105, 41, -16, -4, -26, -15, -126, -5, -12, 107, 11, -4, 27, 73, -46, -20, -23, -32, -42, -23, 25, -65, 22,
    94, 2, -126, 27, 49, 64, 48, -82, -22, -100, 42, 54, -82, -10, -58, 30, 125, 29, 2, -66, -4, 48, 45, -95, 74, -9, -69, -55, 8, -12, -118, 19,
    0, 19, 45, 14, 65, -78, -49, 10, 10, 25, 6, -25, 40, -70, -12, 5, -8, 26, -63, 4, 17, -29, -51, -80, -26, 39, -5, -54, -37, -6, 60, 8,
    113, -55, 34, 70, -51, 119, 33, -21, -27, -54, -31, -76, -112, -71, 0, 36, 6, 26, 6, 58, 50, -7, -28, 0, 55, -6, -107, 9, -23, 53, 117, 37,
    64, 80, 48, 53, -27, -25, 0, 52, 70, -38, -9, 69, 8, 68, 5, 19, 4, -40, 10, -82, -51, 9, -51, 29, -52, 63, 1, 14, -60, 14, 35, 59,
    57, 50, 36, 51, -11, -78, -57, 39, 45, 33, -45, -58, 15, -5, 44, -7, 45, 54, 64, -19, 15, 82, 16, -11, 93, -126, -66, 22, -36, -79, -97, -47,
    25, 24, -54, 25, 20, -1, 55, -19, 30, -84, 80, 35, -44, 81, 16, -2, -15, -34, -17, -78, 52, -80, 32, -11, 126, 33, -49, -59, -33, 47, -67, 106,
    37, -116, 43, 27, -36, -26, -3, 69, 32, 8, 2, 30, -24, -3, -22, -44, -57, 29, 77, 13, -29, -123, -59, 34, -12, 9, -45, 8, 27, 27, 9, 15,
    -65, 16, 12, -41, 19, -120, -29, -56, -32, -52, 126, -3, 33, 30, -126, -23, 97, -32, -37, -25, -107, -72, 5, -8, 44, -19, -103, -42, -5, -53, -15, -111,
    -80, 10, -38, 90, -48, 63, -39, 13, 87, 126, 0, -32, -51, -126, -65, 56, 26, 10, -68, -75, 29, -75, 118, 39, 24, -47, 13, -20, -31, -98, 101, -8,
    -30, 0, 14, -32, -80, -48, 27, 8, 1, 1, 28, -33, -24, -18, 17, 0, 65, 38, 73, -13, 32, 38, -70, 4, -79, 36, -4, 52, -55, 2, -29, 112,
    -85, -13, -13, 126, -17, -77, -73, 126, 0, -16, 24, -42, -31, -54, 6, 6, 61, -17, -62, -126, 29, -125, -32, 8, 16, 49, -14, -4, 8, -32, 74, 0,
    -8, -39, -88, -49, 72, 81, -1, -61, -63, -19, 52, 51, -49, -37, 67, -39, -3, -70, 55, 22, -13, -19, -15, -7, 41, 37, -126, -31, -53, -5, 43, -34,
    -33, 49, 10, -32, 126, -84, -34, -13, 29, -4, 44, 7, -63, -82, 8, -5, -32, -31, 9, 3, -88, -43, 38, -85, -45, 16, 60, 124, -56, 17, -41, 4};

std::vector<float> vw_scale = {
    0.01994153f, 0.01707955f, 0.01639563f, 0.01674201f, 0.0173419f, 0.01648636f, 0.02229527f, 0.01640682f,
    0.01605419f, 0.01420801f, 0.01813094f, 0.02044718f, 0.01936085f, 0.01368465f, 0.0218789f, 0.01998482f,
    0.01896506f, 0.01307391f, 0.02955246f, 0.02256231f, 0.01505032f, 0.01627063f, 0.02369127f, 0.01459647f,
    0.01540207f, 0.02831273f, 0.01980478f, 0.01731144f, 0.02150169f, 0.01284769f, 0.01426158f, 0.01969573f};

std::vector<int8_t> weightv = {
    30, 86, -20, 33, 43, -26, 54, -44, 50, 2, 87, 8, -14, 67, 49, 82, -37, -64, 44, 2, -22, 68, -39, -9, -57, -21, -64, -59, -91, -56, -83, -9,
    11, 22, 20, -75, -73, 15, -59, 101, -3, 11, 22, -18, -1, 28, 55, -9, -7, 24, 8, 34, -112, 37, 71, -52, -36, -9, -2, 42, 43, 60, -29, 121,
    69, -122, 54, -21, -34, 23, -93, -51, -53, -29, 40, 126, 70, -33, 91, 26, -54, -118, 5, 5, -57, 67, -126, 76, -15, 83, -50, -11, 31, 0, -14, 14,
    5, -14, 10, 36, 83, -106, 3, 0, -5, -1, 27, -57, -11, -43, -72, -91, 82, 71, -55, -45, -30, -52, 27, 41, -51, -35, 25, -22, -11, -3, 66, 27,
    -16, 6, -91, 109, 25, -83, 58, 82, -51, 62, 19, 61, 71, -85, 60, -22, -126, 99, -57, 114, -109, -42, -70, -74, -6, 2, -15, 17, -126, 7, 124, 29,
    8, -55, 37, 48, -5, -28, -28, 44, 10, 62, -82, -59, 19, 51, 83, 35, 66, 22, 2, -36, -46, -13, -27, -65, 27, -19, -24, -71, -18, -1, -3, 32,
    -55, 13, -15, 8, -43, 39, -10, -78, 62, 9, -61, -24, 57, -80, 3, 17, 35, -78, 23, -55, 40, -33, 67, 37, 32, -82, -64, 56, 66, 85, 55, -25,
    -21, 126, -90, -75, -54, -56, 98, -46, -78, 105, 70, -2, -5, 110, 65, -51, 14, -112, -21, 52, -2, -4, 68, 55, -14, 71, 9, -87, 48, -113, -6, 16,
    -12, -18, -29, 51, 2, 37, -70, -61, -22, 123, 57, 26, -70, 59, 19, -10, 90, -7, 22, 0, 37, 18, -1, -125, -28, -13, 46, 85, 3, 126, -73, -126,
    -40, -20, 43, 42, -71, 48, -5, 15, 32, -14, -15, -57, 32, 42, 32, 55, -78, 31, 19, 52, -97, 45, 3, -101, -51, -72, 90, -5, -71, -92, -105, 22,
    -86, 43, -22, 63, 52, -42, 53, -55, -32, -96, -33, -22, 56, 31, -84, 3, 30, -58, 12, 1, -28, -90, -1, 45, -5, 11, 45, -55, 54, -88, 32, -10,
    -86, -78, 41, -31, 72, 27, -44, 126, -26, -67, -78, -55, 56, -21, -45, 31, -35, 55, -26, -40, 95, -15, -39, 9, -77, -49, 3, -33, -5, -73, -35, -49,
    121, -5, -78, 13, -63, 4, 87, 36, 14, 49, 5, -38, -7, -13, 4, -6, -54, 15, -39, 46, -19, 81, 0, -34, 115, 28, -15, 92, -59, 34, -13, -16,
    -10, -50, -44, 4, 60, -5, -126, -18, -61, 60, -24, -13, 48, -40, -21, -42, -66, -55, 29, -78, -43, -8, -12, -31, -10, 15, -23, -38, 10, 51, 126, -15,
    1, 4, -22, 45, -72, -8, 0, -103, -54, 27, 126, 67, 24, -94, -5, -126, -78, 59, -8, -15, 46, 26, 21, 48, 13, 36, -3, 33, 56, 9, 54, -21,
    37, -26, -17, -3, -100, 74, -29, -13, -94, 72, -65, -13, 44, 126, -126, -35, -41, 29, -33, -89, 3, -98, -95, 98, 4, -22, 17, -31, 24, -9, -8, 44,
    -16, -43, 0, -82, -48, -126, -38, -53, -6, -54, -7, 7, 20, -61, -21, 21, 5, 6, -9, -34, 34, -100, -51, -6, 48, -2, 27, -47, 30, -108, 7, 1,
    -81, 37, 50, -33, -63, -49, 69, -85, 20, -54, -20, 6, -18, 33, -10, -16, 42, -51, -13, -25, -50, 13, -37, -116, 59, -25, 21, 20, 64, -28, -57, -94,
    37, -29, 47, -37, -31, 39, -49, 19, -126, -40, 37, 19, 0, -84, 62, 15, 96, 79, -32, 34, -52, 32, 12, -44, 115, 1, 50, -40, -25, -46, -42, 22,
    20, -12, 126, -55, 97, 0, 43, -4, 35, 4, 7, 3, -63, -84, -54, -48, 30, 22, 0, -20, -126, 126, 1, -29, -46, -16, 52, -126, -20, 34, -16, -26,
    60, -15, -23, 28, 12, 14, -64, 34, -79, 78, -44, -34, -83, 67, -64, 38, 30, 35, 17, -37, -74, 72, -49, 23, 126, 3, -126, 23, 34, -34, -38, -48,
    -126, 48, -77, 35, -26, -7, -42, -56, 67, 126, 3, 55, -2, 38, -21, 114, 51, 83, 9, -78, -64, -57, -51, -1, -34, 126, 19, -45, 33, -75, 65, 23,
    -6, -108, -16, 2, -29, -35, 111, 64, 27, 49, -38, 46, -33, -25, -43, -41, -25, -38, -54, -7, 36, -78, -29, -25, -8, 9, 103, 36, -76, 16, 111, 18,
    -3, -23, 95, 92, 25, -14, -3, -57, -7, -81, -113, -54, -34, -18, 5, 42, -111, -126, -2, 38, -34, -7, 13, -26, 37, -10, 32, -53, 36, 58, -32, -37,
    -13, -58, 18, 126, -38, -65, -3, -44, -53, -114, 95, -52, -9, 91, 13, 21, -64, 45, -11, -65, -85, 42, -50, -8, -46, 66, 9, 102, -39, 8, -85, -33,
    62, -20, 21, -92, 60, 26, 3, -11, 13, 37, 0, -2, -44, 80, 67, 48, 21, -25, 3, -55, -81, 22, -6, -15, -57, 68, -6, -33, -49, 29, -11, 7,
    28, -75, 94, 68, -14, 26, 12, 50, -9, 32, 53, -3, 18, 81, -33, -15, 52, 1, 44, -126, 12, -57, 29, -60, -1, -16, -125, 0, -48, -92, 32, -21,
    63, 33, -24, -50, 37, -38, -42, 17, -74, -13, 40, 24, 28, -70, 37, 22, -86, -5, -14, -13, -91, 90, 43, -60, 51, 7, -38, 17, 9, 45, -28, 25,
    -88, -105, 6, 48, -11, -20, -29, -8, -2, -96, 21, 23, -13, -12, 94, 9, -37, -82, -16, 75, 1, 0, -72, 43, -116, -3, 25, 61, -41, 24, -7, -44,
    41, -20, 97, 51, -126, 60, -78, 23, -33, 67, 23, -53, 73, 17, -47, -16, 27, 19, -26, 18, 21, 49, -52, -30, -3, -2, 58, 41, 76, -105, -8, -73,
    -5, 11, -33, 48, -14, -76, -16, 6, 14, 0, -43, -51, -126, 43, 3, -20, -23, -55, -126, 16, -28, 40, -1, -39, 86, -6, 45, 6, -56, 4, 10, -11,
    -58, -45, 2, 5, -113, 71, -14, -59, 72, -33, -35, 71, 32, 51, 23, -66, -84, 76, 24, 40, -54, 81, 34, -79, -21, 36, 41, -50, 10, -81, 48, -19};

std::vector<float> q_bias = {
    -1.27718644f, 1.61871218f, -1.73461373f, -0.17514887f, -0.50983179f, -0.5539088f, -0.60825769f, -0.07264181f,
    -0.42171224f, 2.24770203f, -1.27762394f, -0.17060831f, -1.21110188f, 0.68030462f, -1.89055384f, 1.35596846f,
    0.47231098f, 2.82512351f, -2.55636382f, -0.53661371f, -1.68733204f, -0.24543444f, 1.55083211f, -1.17610975f,
    0.48049125f, -0.16735561f, 0.19936907f, -0.34314f, 0.57225861f, 0.14891486f, 1.3247936f, 0.22843397f};

std::vector<float> k_bias = {
    0.24619461f, -0.08398405f, -0.15000278f, 0.28278611f, 0.15482547f, 0.26877193f, -0.46768428f, 1.3671303f,
    0.32288311f, 1.17265585f, 0.47832899f, 0.96343534f, 0.46719705f, -0.10524614f, -1.63872145f, -0.41085698f,
    -0.89895607f, -0.42389572f, 0.62396582f, 0.16537653f, -0.4237229f, -1.92260217f, 0.81620084f, -0.04897485f,
    0.11893979f, -0.63913475f, 0.90362149f, -0.97508522f, 2.02528018f, 0.42306451f, -0.68650738f, -0.4003526f};

std::vector<float> v_bias = {
    -1.76091276f, 0.01040782f, -0.71464109f, 1.437348f, -1.53031254f, -0.91845976f, -0.86771295f, -2.52622097f,
    0.53186794f, -1.97078006f, 1.55687761f, -0.02301905f, -0.49155965f, 0.83271961f, -0.76392238f, -1.64432544f,
    -1.56375419f, 0.05317153f, -1.58219612f, -1.20624173f, 0.23029742f, -0.89204571f, -0.06220761f, 0.29425901f,
    -0.43622283f, -0.23443792f, -0.58614933f, -1.52438767f, 0.22378085f, -1.7154992f, -1.37954182f, -1.2237706f};

float qlayer_scale = 0.2265026f;
float klayer_scale = 0.13910806f;
float vlayer_scale = 0.12165456f;

float qk_scale = 3.19659569f;
float probs_scale = 0.00793651f;
float attn_out_scale = 0.12068905f;

std::vector<int8_t> attn_out_q8 = {
    -13, -11, -36, 17, -42, -43, -28, -25, 56, -63, -33, -43, -68, -20, -35, 47, -8, 2, -46, 81, 24, -6, 0, -63, -22, -96, 81, 14, -82, -21, -51, -4,
    -9, 0, 32, 75, -11, 11, 83, -89, 47, -7, 79, 31, -21, -9, -4, -92, -36, 28, -45, -81, -109, 71, 3, -44, 60, 47, -65, 7, 27, -16, -4, -21,
    -23, 46, -60, -78, 9, -24, 37, 27, 24, 26, 0, -42, -34, 65, 8, 59, -36, 28, -45, -81, -109, 71, 3, -44, 60, 47, -65, 7, 27, -16, -4, -21,
    -23, 46, -60, -78, 9, -24, 37, 27, 24, 26, 0, -42, -34, 65, 8, 59, -31, 19, -40, -2, -29, 21, 11, 14, 0, 126, 40, -51, 42, -49, -9, -40,
    -56, 49, -103, 1, -101, -48, 44, -46, -53, 107, 80, 37, 49, 16, -18, -119, -30, 18, -39, -2, -28, 20, 11, 14, 0, 124, 40, -51, 41, -49, -9, -39,
    -37, -58, 51, 71, 25, 49, 8, 0, 57, 16, -46, -97, -25, 81, -27, 4, 61, -10, 35, -81, 16, -36, -30, 20, -81, -101, -30, -48, -85, -15, -19, -47,
    -13, -11, -36, 17, -42, -43, -28, -25, 56, -63, -33, -43, -68, -20, -35, 47, 66, 52, -39, 7, 66, -102, 4, 23, -7, 1, -12, 2, 54, -46, 56, -43,
    -32, 32, -54, 3, -26, -9, 32, 17, 70, 35, -19, -23, -25, 35, 23, 58, -9, 2, -46, 82, 25, -7, 0, -64, -23, -97, 82, 14, -83, -22, -52, -4,
    -28, 31, -70, -37, 13, -30, 51, 22, 36, 26, -4, -26, -49, 58, 6, 46, -101, -57, 34, 74, 4, 26, 61, -8, -74, -24, 34, 26, -20, 28, 10, -72,
    -4, 11, 28, 76, -18, 3, 99, -108, 45, -12, 104, 56, -20, -26, 0, -112, 19, 12, -63, -25, 5, 24, -23, -3, 93, -48, -9, 48, -10, -14, -34, -20,
    -23, 46, -60, -78, 9, -24, 37, 27, 24, 26, 0, -42, -34, 65, 8, 59, 49, 4, 1, -89, 44, -23, -46, -12, -34, -73, 35, 42, 32, 10, -33, -73,
    -20, 39, -51, -59, 3, -23, 36, 13, 27, 16, 5, -34, -35, 51, 4, 45, -6, 21, -27, -15, -15, -6, 12, -9, 7, 16, -20, 6, 28, -20, 20, -38,
    -20, 39, -51, -59, 3, -23, 36, 13, 27, 16, 5, -34, -35, 51, 4, 45, -6, 21, -27, -15, -15, -6, 12, -9, 7, 16, -20, 6, 28, -20, 20, -38,
    -20, 39, -51, -59, 3, -23, 36, 13, 27, 16, 5, -34, -35, 51, 4, 45, -6, 21, -27, -15, -15, -6, 12, -9, 7, 16, -20, 6, 28, -20, 20, -38,
    -20, 39, -51, -59, 3, -23, 36, 13, 27, 16, 5, -34, -35, 51, 4, 45, -6, 21, -27, -15, -15, -6, 12, -9, 7, 16, -20, 6, 28, -20, 20, -38,
    -20, 39, -51, -59, 3, -23, 36, 13, 27, 16, 5, -34, -35, 51, 4, 45, -6, 21, -27, -15, -15, -6, 12, -9, 7, 16, -20, 6, 28, -20, 20, -38};

std::vector<int8_t> transpose(const std::vector<int8_t>& src, int h, int w) {
  std::vector<int8_t> transposed(src.size());
  const int8_t* s = src.data();
  for (int y = 0; y < h; y++) {
    int8_t* t = transposed.data() + y;
    for (int x = 0; x < w; x++) {
      *t = *s++;
      t += h;
    }
  }
  return transposed;
}

std::vector<float> scale_bias(const std::vector<float>& src, float scale) {
  std::vector<float> scaled(src);
  for (float& v : scaled) v /= scale;
  return scaled;
}

TEST(QOrderedTest, Attention_WithData_ROW_ORDER) {
  OpTester test_qorder("QOrderedAttention", 1, onnxruntime::kMSDomain);
  test_qorder.AddAttribute("order_input", (int64_t)ORDER_ROW);
  test_qorder.AddAttribute("order_output", (int64_t)ORDER_ROW);
  test_qorder.AddAttribute("order_weight", (int64_t)ORDER_COL);
  test_qorder.AddAttribute("num_heads", (int64_t)num_heads);
  std::vector<int64_t> qkv_hidden_size(3, (int64_t)num_heads * head_size);
  test_qorder.AddAttribute("qkv_hidden_sizes", qkv_hidden_size);

  test_qorder.AddInput<int8_t>("input", {batch_size, sequence_len, input_hidden_size}, inputq);
  test_qorder.AddInput<float>("scale_input", {}, {input_scale}, true);
  test_qorder.AddInput<float>("scale_Q_gemm", {}, {qlayer_scale}, true);
  test_qorder.AddInput<float>("scale_K_gemm", {}, {klayer_scale}, true);
  test_qorder.AddInput<float>("scale_V_gemm", {}, {vlayer_scale}, true);
  test_qorder.AddInput<int8_t>("Q_weight", {input_hidden_size, hidden_size}, transpose(weightq, input_hidden_size, hidden_size), true);
  test_qorder.AddInput<int8_t>("K_weight", {input_hidden_size, hidden_size}, transpose(weightk, input_hidden_size, hidden_size), true);
  test_qorder.AddInput<int8_t>("V_weight", {input_hidden_size, hidden_size}, transpose(weightv, input_hidden_size, hidden_size), true);
  test_qorder.AddInput<float>("scale_Q_weight", {hidden_size}, {qw_scale}, true);
  test_qorder.AddInput<float>("scale_K_weight", {hidden_size}, {kw_scale}, true);
  test_qorder.AddInput<float>("scale_V_weight", {hidden_size}, {vw_scale}, true);
  test_qorder.AddInput<float>("Q_bias", {hidden_size}, scale_bias(q_bias, qlayer_scale), true);
  test_qorder.AddInput<float>("K_bias", {hidden_size}, scale_bias(k_bias, klayer_scale), true);
  test_qorder.AddInput<float>("V_bias", {hidden_size}, scale_bias(v_bias, vlayer_scale), true);
  test_qorder.AddInput<float>("scale_QKT_gemm", {}, {qk_scale}, true);
  test_qorder.AddInput<float>("scale_QKT_softmax", {}, {probs_scale}, true);
  test_qorder.AddInput<float>("scale_values_gemm", {}, {attn_out_scale}, true);
  test_qorder.AddInput<int32_t>("mask_index", {batch_size, sequence_len}, input_mask);
  test_qorder.AddOptionalInputEdge<int8_t>();  // past
  test_qorder.AddOptionalInputEdge<float>();   // extra_add

  test_qorder.AddOutput<int8_t>("output", {batch_size, sequence_len, hidden_size}, attn_out_q8);

  std::vector<std::unique_ptr<IExecutionProvider>> execution_providers;
  execution_providers.push_back(DefaultCudaExecutionProvider());
  test_qorder.Run(OpTester::ExpectResult::kExpectSuccess, "", {}, nullptr, &execution_providers);
}

}  // namespace test
}  // namespace onnxruntime
