// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// #if defined(USE_CUDA) && defined(CUDA_VERSION) && CUDA_VERSION >= 11000

#include "gtest/gtest.h"
#include "test/common/tensor_op_test_utils.h"
#include "test/common/cuda_op_test_utils.h"
#include "test/providers/provider_test_utils.h"
#include "test/util/include/scoped_env_vars.h"
#include "contrib_ops/cpu/bert/longformer_attention_base.h"

#include <numeric>
#include <functional>
#include <iostream>
#include <math.h>

namespace onnxruntime {
namespace test {

enum OrderCublasLt {
  ORDER_COL = 0,
  ORDER_ROW = 1,
  ORDER_COL32 = 2,
  ORDER_COL4_4R2_8C = 3,
  ORDER_COL32_2R_4R4 = 4
};

const int64_t batch_size = 1;
const int64_t sequence_len = 16;
const int64_t input_hidden_size = 32;
const int64_t num_heads = 2;
const int64_t head_size = 16;
const int64_t hidden_size = num_heads * head_size;

float input_scale = 0.02685603;
std::vector<int32_t> input_mask = {  // [1, 16]
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0};

std::vector<int8_t> inputq = {  // [1, 16, 32]
    9, -36, 64, -15, 23, 53, 6, 64, 4, 21, 9, 1, 0, 15, 8, -1, 8, 67, 7, -3, -8, 21, 2, 3, -11, 14, 54, -51, -64, -32, -51, -97,
    -27, -53, 81, 27, -42, 7, 51, 25, 18, -8, -30, 78, 34, -14, -8, 52, -28, 10, 33, -30, -17, 63, 21, -36, -70, 6, -83, 45, 9, 91, 26, 43,
    55, -11, 27, -20, 21, -13, 5, 18, -10, 41, 28, 20, 32, -28, 11, -126, 34, -16, -11, 33, -62, 12, 11, 27, -42, -26, -71, -20, 12, -11, -2, -8,
    -29, 22, 20, -8, 82, 86, 12, -19, -38, 78, 5, 44, -39, -6, -8, -12, -22, 1, -1, -66, -21, -20, 3, 43, -71, -64, -58, -88, 62, 7, 1, -2,
    -12, 23, -16, -18, 0, 21, -23, 2, 13, -7, -26, 11, 55, 26, -37, -16, 26, 33, -33, -13, -36, -46, 66, 5, -60, -13, -7, 48, 46, 29, -1, -25,
    12, 9, 41, -18, -15, -59, -47, 34, 4, 30, 0, 0, -24, 48, -3, -1, 54, 7, -11, -19, 6, -47, -13, 3, 15, -1, -60, 33, 33, -6, -24, 3,
    4, 41, 6, 40, -28, -4, -4, 9, 23, -54, -59, 122, -34, 37, -56, 25, 6, 38, -8, -36, -56, -6, 38, 7, 11, -3, 23, 11, 18, 45, 70, -85,
    15, 41, 26, 11, 37, 37, -6, -13, -9, 76, 13, 22, -15, 14, 16, 18, -31, 64, -6, 39, -59, 43, -2, -1, 0, 0, 21, -28, -27, -29, 6, -27,
    28, 17, -33, 66, -8, 18, -18, 32, -31, -10, -37, 37, 9, -26, -6, -4, -43, -50, -51, -37, -5, 41, 71, -17, -31, -8, 35, -21, -26, 54, 21, -2,
    8, 17, -59, -5, 0, 15, 9, 18, 50, 12, -64, 19, 33, 1, 19, -36, 2, -59, -74, -42, -14, -31, 17, 79, -29, 20, 4, 16, -31, -9, -20, -37,
    1, 30, -70, 4, 33, 22, -25, 59, 0, 37, -6, 22, 3, -45, -17, -6, 14, 29, 37, 14, -32, 75, -47, 48, -15, 73, 16, -13, -15, 36, 24, -9,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

std::vector<float> qw_scale = {  // [32]
    0.01881552, 0.02239256, 0.01576185, 0.01726429, 0.01502208, 0.01459013, 0.01163977, 0.0207588,
    0.01915031, 0.01757362, 0.02249763, 0.02181096, 0.0212858, 0.02260292, 0.02009927, 0.01520935,
    0.01793923, 0.01987924, 0.01829867, 0.01492072, 0.01886253, 0.0327149, 0.02243559, 0.02300745,
    0.01996875, 0.01668822, 0.02410788, 0.015931, 0.01361864, 0.01665949, 0.01681403, 0.0160592};

std::vector<int8_t> weightq = {  // 32 x 32
    8, -46, -76, -50, -55, -34, -50, -16, -38, -90, 68, -64, 18, 66, -37, 17, -76, 71, -32, -32, 56, -78, -88, -1, -53, -54, 26, 20, 10, -82, -72, 36,
    13, 105, 23, 0, 62, -75, -46, 45, 30, -52, 69, -12, 61, 0, -50, -86, 92, 65, -25, -77, -11, -15, -59, -69, -32, 39, -12, -40, 12, 5, -51, 126,
    -13, 48, 26, -35, 58, 106, 57, -63, -32, 80, 89, -30, -19, 36, -5, 126, -10, 126, 53, 120, 126, -33, -7, 6, -122, -30, -18, 2, -44, -19, 54, 14,
    126, -77, 67, -76, -20, -56, -100, 49, -71, -12, -18, 8, -50, -6, 73, 32, 1, -3, -27, -11, 16, 16, -30, -47, -6, -52, -51, -9, 69, -61, -51, -99,
    65, -7, 34, 60, 43, 126, -92, 28, -3, 42, 10, -3, -12, 54, 49, -16, -104, -63, 43, 14, -73, -6, -47, 10, -90, 19, -101, 65, 10, 73, 35, 49,
    -1, -36, -110, 103, 13, -76, -118, 11, 126, 0, 0, -17, -12, -51, 11, 68, 42, 15, -28, -95, 25, 18, 53, 28, 40, 30, -22, 45, -48, 32, 17, 25,
    -58, -57, -65, 53, -38, -36, 126, -17, 0, -40, 85, -44, 50, 15, 18, 15, -38, 21, -30, 55, -101, -6, 2, 51, 74, -11, 27, -74, -19, -27, 70, -7,
    64, -13, -49, 0, 77, 103, 66, 73, -81, 3, 35, -1, 126, -58, -18, -76, 3, -14, 21, 14, 105, -16, 22, -13, -61, 3, -7, -18, 41, -15, -80, -69,
    23, -38, 71, -81, 3, 9, -38, 18, 2, 40, -64, -60, 22, 32, -14, 42, 68, -18, -45, 77, -13, -18, 32, -57, -17, 0, -19, -2, -10, 63, 126, 105,
    -11, -20, 126, -2, -6, 94, -47, 98, -10, -58, 49, -16, 35, 5, 6, 74, 116, 22, 23, -60, 37, 2, -46, -54, -30, -31, -37, 71, -39, -71, 24, -53,
    -24, 38, -70, -8, -46, -92, -18, -52, 66, -42, 63, -70, 37, -32, 28, 30, 33, 4, -28, 108, -38, -16, 5, -105, 11, 32, -16, 40, -65, -31, -21, 43,
    -76, -40, 41, 107, -126, 83, 7, 24, -42, -91, -58, -65, 23, -9, -38, 19, -36, 14, -17, 51, 6, -22, -53, -1, -18, -111, -9, -25, -126, -69, -97, -12,
    -5, -13, -105, 26, 29, -53, -122, 53, -17, 49, 125, 63, 85, -50, -57, 105, -43, 55, -68, -110, 72, 126, 12, 86, -27, -7, 53, -91, -23, 42, 15, -68,
    59, -79, 101, 2, 62, -21, 28, 74, -98, -25, -37, 15, 10, 35, 22, 54, 105, 29, -38, 83, 2, 47, -3, -42, -21, -126, -8, 69, -2, -73, 39, 105,
    -25, 48, 0, 8, 26, -62, 46, 49, -88, -64, -40, -14, 116, -48, -42, 119, -10, -21, 8, 51, 38, -3, -32, 126, -15, -107, 41, 51, 57, -28, -49, 71,
    -15, 97, -41, 20, 41, 93, -85, 126, 65, 69, 35, 46, -50, 21, -68, -17, 29, 99, -67, 49, -27, -32, 16, 9, -42, 9, 51, -60, 113, 34, -37, -43,
    -23, -66, -22, -71, -68, -57, -6, 2, -37, 51, 15, -126, -10, -30, 39, 4, 13, -74, -125, -26, 41, -8, 41, 95, -69, 56, 2, -6, -16, -3, 8, -5,
    39, 11, -46, 44, 69, -88, 82, -4, 58, 67, -8, -55, 18, -36, 40, 69, 107, 8, -49, -30, -14, 19, 13, 71, -30, 68, 31, -71, 72, -31, -76, 36,
    13, 126, 38, 51, -27, -87, -16, 19, -36, -9, -60, 64, 60, -30, -5, 4, 92, -31, 42, -90, 4, 41, 126, 36, -107, 46, 58, -24, 46, -34, -11, -85,
    5, -31, 11, -43, -104, -52, -56, 30, -58, 10, 20, 3, -23, -20, 22, -7, 5, -26, -68, 3, 43, 0, 37, 26, -32, 27, -23, 81, 68, 126, -93, -5,
    64, 86, 52, 8, -9, 107, -111, 7, -2, 95, 9, -17, 27, 126, 84, 7, 33, 43, 44, 26, -18, 20, 45, 78, -126, 11, -61, 22, -35, -1, -41, -120,
    78, -19, -22, 29, -15, -17, -121, 6, -8, 0, 36, -51, 75, -52, -5, 7, 83, 27, 59, 88, 0, 20, -94, 16, -23, 29, 20, -33, 94, -7, 40, -4,
    -34, 8, 42, -3, 37, 102, 76, 88, -22, 50, -53, -48, 47, 73, -43, -44, 88, -14, -47, 8, -24, 30, -35, -12, 23, 53, 126, 17, 93, -16, -34, -82,
    16, -10, 79, -126, 71, -12, 56, 29, 1, 9, 72, -27, -53, -31, 39, -66, -49, -7, -18, -14, -108, -29, 13, 16, -82, 10, 0, 30, 92, 24, 77, 53,
    25, -7, 48, 12, 91, 57, -108, 21, -103, 21, -33, 83, 104, -38, 23, 2, 101, -71, -61, -126, 31, 2, 1, -65, 0, 86, -79, -126, -2, -67, 48, 60,
    -19, 32, 80, -35, -11, -30, -81, 6, 16, 126, 72, 22, 46, -13, -23, 32, -11, 47, 17, 12, -8, 60, -58, 25, 34, 99, 3, 112, 47, 97, 14, -11,
    63, -6, -40, -123, -61, 16, -21, 11, 31, 30, 0, -39, -35, -16, -126, -99, -85, 53, 64, 74, 114, 39, 91, 104, -71, 44, 20, -91, -95, 80, -80, 97,
    -36, -31, 44, -18, 37, 0, 71, -19, 6, -11, 21, -30, 27, -5, 48, 12, 97, 53, -72, -102, -46, -21, -63, 32, -92, -8, 23, -80, -118, -2, -79, -67,
    -21, 49, -3, 99, 116, 54, -26, 53, -77, -29, 60, 24, 17, -1, 40, 98, -53, 11, 82, 54, -54, 59, 84, -63, -41, 48, 68, -47, 53, -5, 42, 26,
    -43, -34, -39, 10, 20, -19, 11, -27, 77, -86, 119, -35, -81, 25, 20, -115, 126, 51, 66, -107, -8, 48, -76, 102, -56, -43, -27, -79, -6, 3, -1, -31,
    -48, 3, -9, -97, 74, 20, 70, -34, -22, -32, -68, -17, 5, 3, 0, -28, 74, -4, -49, -104, 66, 36, -30, 2, 107, 95, -2, -20, -41, -5, 70, 32,
    -20, 25, 10, -3, 21, 45, -81, 3, -44, 7, 48, -45, -33, 95, 81, -119, -66, 16, 66, -98, 50, -24, 13, 44, 25, 55, 44, 39, -14, -61, -31, -14};

std::vector<float> kw_scale = {
    0.02303111, 0.01564436, 0.01391537, 0.0172339, 0.01516508, 0.01228378, 0.01702758, 0.0165159,
    0.01963309, 0.01892526, 0.01787565, 0.02355538, 0.02242805, 0.01778687, 0.02357139, 0.02675311,
    0.01846977, 0.01662205, 0.01463055, 0.01681451, 0.01281792, 0.01908144, 0.01527894, 0.02031809,
    0.01351026, 0.02313714, 0.0245251, 0.02198207, 0.01890697, 0.01567561, 0.02898158, 0.02196027};

std::vector<int8_t> weightk = {
    37, -9, 64, -16, 65, -23, -29, -99, 22, -38, 68, 125, 1, 76, -18, 27, -56, 37, 0, -21, -87, -100, -78, 89, -12, 24, 31, -45, -41, -20, -7, 72,
    11, 19, -61, -32, 13, 55, 10, -2, 43, 63, -117, 83, 27, 105, 68, -13, -81, 13, 66, 19, 57, -57, -50, 44, 83, -98, -25, 39, -18, 0, 0, -40,
    -33, -49, -29, -32, -18, 69, -77, 39, 17, -44, -61, 30, 45, -38, -13, -50, 16, -96, -96, -1, -61, -4, -4, 35, -48, -76, -3, -49, 23, -2, 0, -47,
    -125, 107, 14, -126, -44, 9, 105, -51, -15, -121, -12, 56, 40, 18, -3, 13, 9, -19, 10, 28, 26, -3, -15, -38, -74, -36, 25, 23, 30, -12, -23, 19,
    31, 126, -39, -80, 86, 80, 20, 38, -14, -70, -63, 55, -17, 35, -31, -53, -113, 14, -97, -23, -46, 35, -32, -4, 42, -43, -2, 64, 53, -54, -10, -37,
    12, -79, 58, 104, -27, 47, -54, -18, 5, 44, -47, -7, -126, 57, -11, 4, 55, -7, -107, 32, -15, 4, 32, 67, -6, -29, 71, 29, 34, 36, 0, -5,
    -24, -106, 0, 12, -87, -93, 22, 31, -101, 19, -94, -2, 18, 25, 37, 6, 88, 62, -108, 4, 9, -45, -37, 91, -5, -27, 67, 36, -4, -109, -126, -70,
    -4, -32, -59, -10, 89, -74, 48, -82, 0, 22, 20, -78, -24, 40, 65, 126, 30, 61, 21, 13, -79, -80, -11, -41, 34, 3, 3, -62, -35, 55, 2, 37,
    30, 63, 3, 34, 15, 66, 14, -35, 28, 25, 60, -14, 47, 10, 41, -3, 126, 3, 118, 19, -46, 2, -52, -43, 23, 32, 10, -53, 83, -9, 72, -6,
    17, 83, -29, -54, -73, 70, 8, -16, -22, -7, -97, -6, 20, 111, 91, -21, 66, -23, 67, 22, 14, -12, 20, 51, -19, -51, 16, -126, 25, 14, 39, 125,
    -20, -77, 59, -43, -80, 104, 4, -12, -5, -66, -34, 8, 55, 8, -40, 38, 69, 76, -77, 64, -54, 24, 25, 41, -68, -17, 42, 51, -33, 61, 24, 25,
    30, 0, -35, 79, -34, -4, 72, 90, 50, 20, -11, -2, -22, -43, -23, 19, -23, -19, 21, -45, 117, 32, 16, 22, -99, 77, -28, -73, 26, 109, -25, 16,
    -7, 27, -64, -93, 82, 20, 51, -89, -15, 28, 120, 45, -63, 126, 0, 8, -16, 11, 21, 97, -41, 60, 55, 11, -31, 13, 65, 18, -80, -1, 15, 45,
    -51, -27, -37, -68, -27, -116, 100, 40, -47, 5, -36, -55, -4, -56, -38, 13, 21, 39, -35, -69, -21, 126, -20, 87, 27, 37, 10, -2, -47, -33, -19, -67,
    52, -83, 40, 13, -38, 122, -29, -110, 38, -86, 6, 78, 14, -20, 33, -29, -13, 54, 109, 24, -24, 34, -27, 33, 6, 122, 42, -17, 34, 85, 12, 1,
    -46, 4, -22, -48, -2, -5, -92, -60, -36, 49, -5, 0, 13, -6, -9, -9, 99, 36, -20, -2, 20, 58, -54, -125, 12, 55, -102, -56, -82, -25, 4, -13,
    -27, 40, 62, -13, 82, -50, -25, -33, 126, 33, 125, -50, 6, -62, -28, -25, 64, 34, -80, -26, -3, 12, -61, 21, -90, 29, -27, 26, -48, 57, -5, -4,
    42, 57, -126, 25, 25, 50, -17, -126, -17, 91, -19, 7, -5, 3, -31, 24, 18, 35, 91, -59, -2, 29, -15, -18, 58, -23, -25, 43, 2, 61, 18, -105,
    -24, 69, 2, -40, 51, 41, -41, 78, -54, 4, 7, 32, -43, -83, -17, -34, 44, 126, -72, 89, -37, 4, -46, -9, -36, -30, -29, -61, 0, -6, 12, 45,
    45, -41, 53, -67, -25, -71, 4, 75, -94, -21, 9, -44, -39, -105, 48, 61, -36, 94, 15, -23, -51, -31, 46, 40, -37, 69, -92, 24, 0, 10, -36, -41,
    -5, 13, 59, -30, 29, -88, -126, -7, 57, -16, 77, -21, -30, -38, 20, -8, 52, 82, -64, 73, -9, -54, -126, 41, -120, 55, 126, -60, 126, 14, 39, -11,
    94, -52, 13, -75, 27, -58, -14, -81, 98, -8, 76, 24, -47, 100, -28, 28, 0, 97, -11, 62, 2, 38, -20, -45, -126, -13, 43, 36, -64, 31, 52, 85,
    26, 50, -27, 46, -96, -37, -93, -14, 12, -72, 25, 25, -35, 33, -16, -53, 98, -43, 48, -80, -126, -22, -25, 7, 44, -44, -40, 2, 26, 126, 52, 7,
    34, 60, -45, 30, 18, -39, 15, 16, 9, -126, -14, -11, 42, -72, -21, 11, 48, -57, -46, 14, -98, 31, 14, 49, -47, 70, -26, 0, 31, 10, -22, 61,
    3, 64, 59, -56, 126, 93, 22, 21, 2, 44, 125, -64, -46, -54, -29, 6, 1, -39, 36, 88, 14, 30, 11, 60, -31, -21, 49, 74, 71, 36, 14, 64,
    28, 46, -14, -56, 6, 52, 51, 0, -5, -83, 65, -21, -39, -71, -14, 27, -54, -47, 109, 87, 29, -5, 26, 16, -1, 15, 6, -51, 13, -115, -68, 9,
    90, 18, -96, -39, 17, 20, -18, 50, 45, -47, 85, -37, 2, -2, 17, -21, 116, -98, 63, 53, 38, 9, 27, -99, -69, 35, 5, 21, -21, 13, -46, -60,
    -76, 0, -72, 23, -2, -21, 9, -25, 77, 18, -36, -36, -44, -44, 2, 26, -43, -91, -13, 67, -31, 38, -95, 21, 49, -47, -73, -111, -56, -106, 21, -21,
    32, 56, -11, 0, -55, -33, 46, 0, -19, 27, -53, 19, -35, 50, 6, -15, -1, -31, 48, 125, -45, 49, 66, -10, -56, -110, -36, -12, 4, 67, 15, 42,
    -1, 3, -60, 38, -80, -16, -64, 27, 9, 63, 37, -47, 15, -35, -31, 43, -2, 26, 45, 28, -35, 11, -11, -61, -31, -96, 16, 3, 95, 18, -54, -56,
    -21, -15, -83, 38, 31, 126, 67, 2, 16, -32, 40, 19, 35, -16, 126, 1, -59, 23, -70, 7, -53, 21, 42, -41, -84, -126, -18, -31, -79, 105, 25, 2,
    25, 58, 25, -28, 101, 75, -35, -42, -12, -19, -11, -68, 7, 6, -6, -22, -17, -67, 126, -33, 60, -81, 75, 92, -79, -1, 57, 78, -20, 1, 49, 34};

std::vector<float> vw_scale = {
    0.02346968, 0.0213229, 0.01928369, 0.01916464, 0.0224188, 0.01581116, 0.02177069, 0.02347421,
    0.01939799, 0.02450615, 0.0218677, 0.02141643, 0.01645939, 0.01632855, 0.0223701, 0.01634195,
    0.02190692, 0.02377393, 0.0176199, 0.01825338, 0.0211753, 0.01923434, 0.01532765, 0.02365314,
    0.01665859, 0.02745174, 0.01236806, 0.02156537, 0.01551568, 0.01593552, 0.02258802, 0.02104537};

std::vector<int8_t> weightv = {
    -81, -34, -61, -40, 20, -21, 32, 39, -82, 15, -114, 126, 0, -70, 39, 16, -9, -22, -17, 52, 25, -19, -99, -35, 125, 1, -55, -38, 9, -126, 0, 95,
    10, 18, 2, -10, 3, 31, 43, 31, -92, -47, 2, 4, 99, 8, -6, 51, -74, 59, 20, -8, -33, 41, 6, -79, -11, 14, 80, -33, -56, -9, 42, -16,
    0, 70, -43, -9, 0, -36, 37, 0, -49, -40, -104, 19, -16, 32, 5, 16, 29, -61, -44, 46, 9, 47, -5, -3, -47, 11, 85, -40, 5, 17, 10, 34,
    -38, -28, 14, 19, -103, -73, 62, 70, 3, -13, -58, 47, 115, 28, 32, -126, 38, 29, 35, -54, -27, 80, -32, -6, 29, 44, 103, 4, 49, -28, 0, -87,
    0, -9, -2, 23, -23, -22, -41, -19, 36, 7, 93, 17, -46, 1, 41, 109, -1, -88, 27, 9, 16, -5, -5, -26, 2, -15, 82, -47, -2, 35, -89, 17,
    65, 126, -23, 66, 62, 22, 26, 15, -126, 4, -25, 16, -60, 4, -97, 43, 14, -30, -46, -43, -35, -46, -42, -10, -24, -18, -16, 24, 24, -28, -17, 46,
    61, 25, -63, -69, 30, 51, 76, -29, 21, -83, 52, -70, -87, 49, 57, 49, 4, -6, 12, 42, -24, -24, -76, -60, 94, -19, -75, -16, 40, 82, 40, 126,
    -12, -50, 82, -98, -14, -116, -51, 5, -58, 20, -36, 76, 75, 22, 61, 66, -126, 29, -18, 31, -22, -45, 60, -59, -2, -41, 36, -29, -35, -17, -63, 111,
    15, -8, -54, -65, 36, 62, 76, 43, 32, 29, 6, -49, 69, -52, 45, 15, 43, -30, 32, 5, 40, 8, -22, 61, -68, -9, -114, 19, 93, -34, 5, -125,
    -11, 12, 43, -59, -15, 46, 40, -17, -64, 9, -105, 15, 52, -73, -38, -37, 30, 29, 36, 40, -49, 40, 7, 0, 43, -5, 10, 11, 9, 90, -6, 23,
    0, 2, 37, 47, -103, 70, -32, -1, -61, -6, -15, -69, 28, -19, -64, -11, -43, -29, 69, 65, 86, 34, 63, -31, 5, -28, -45, -43, -49, 34, -76, 60,
    -36, -2, 25, -2, -26, -75, 116, -3, -23, 79, 18, -8, 57, 20, -43, 15, -10, 36, -12, -44, 125, 8, -92, -5, -8, -67, -71, 36, -1, -37, -1, 14,
    29, 28, -56, -38, 63, 37, -13, 41, -4, 39, 14, 0, -70, 115, -126, -11, -23, -41, -126, -5, -116, -49, 15, 3, 47, 18, -2, 16, -123, 27, -40, -26,
    -24, 65, 59, -126, 49, 5, 20, -15, 55, 8, 33, 8, 54, -73, 95, 61, -19, -126, 68, -24, 21, 55, -7, 30, 26, -126, -126, 15, 44, -33, 16, -15,
    53, -76, 76, -58, -12, 7, -15, 21, 30, -51, 0, 36, 126, 1, -2, 29, 31, -92, 24, 68, -2, 10, -54, 72, 91, -33, -33, 8, 50, -59, 39, -65,
    -27, -6, -35, 27, 3, -18, 80, -24, -28, 54, 59, 47, 4, -33, 93, 55, 82, 16, 101, 24, -10, -18, -27, -118, 24, 36, 59, 80, -46, -1, 125, 6,
    -90, -41, -61, -86, 114, 47, -2, 14, -55, -33, -52, 34, 40, 16, 36, 96, 10, 4, -74, 71, 101, -14, 64, -7, 0, -26, 15, 126, -32, 13, -109, 10,
    52, -15, 13, 51, -86, 63, 56, 18, 36, 126, -16, -61, -15, 78, -51, -65, 52, -18, -59, -28, 3, 45, -8, 60, -77, 4, -107, -21, -10, 32, -39, -16,
    -12, -19, -29, -105, -45, -71, -24, 23, -19, -11, -15, 9, 43, 3, -28, -3, -48, -39, 39, 50, -2, 1, 46, -30, 28, 71, -83, -41, 8, 123, -15, -5,
    5, -9, 41, 32, 37, 29, 35, 38, -62, 33, -21, 13, 71, 90, 5, -18, 53, -33, 79, 43, -91, -126, -67, -16, -124, 14, -57, 8, -41, 22, 77, -37,
    -65, -84, -16, -22, -41, 2, 7, -51, 99, -28, 25, -67, -31, 24, 36, 120, -48, 8, 108, -16, -93, -69, 99, -13, -116, -27, 14, -1, -33, -26, -8, -20,
    -69, -27, -3, -75, -18, 36, 23, -72, -71, 81, 72, -56, 57, 20, -19, -13, 26, -17, 37, 7, 14, 14, 25, -39, 72, -14, -105, -20, -21, -61, -73, -56,
    -57, -1, -42, -12, 22, -17, -56, -3, -71, -38, -87, 24, 18, -126, -29, 37, 11, -57, 34, -59, -75, -13, -8, 28, 28, 38, -1, -77, 126, 24, 28, 9,
    6, 0, -50, 91, -31, 60, -58, 59, -29, -21, -46, 35, 16, -3, -19, 27, -34, 80, -45, 17, -2, -17, 35, 50, -60, -11, 90, -8, 20, -26, -79, 10,
    -34, -24, 24, 24, -7, -13, -95, -126, 2, 25, 126, 2, 103, -9, 43, 0, -12, 31, -108, -20, -33, 86, 43, 18, 0, 6, 93, -21, 22, 51, 63, -93,
    -31, 89, 57, -32, -63, 57, -126, 8, -71, 23, -35, -10, 81, -21, 23, 25, 58, 4, 64, 39, 65, 12, -84, 126, -6, -55, 3, -41, 20, 56, 9, 26,
    7, -53, -27, 98, -56, 48, 17, 23, 17, 6, 103, -20, -64, -11, -52, -9, 10, 19, 77, 4, 9, 39, 126, -25, 50, -3, 123, -15, -58, -31, 60, -55,
    -126, 42, -2, -12, -126, 126, 13, 19, -2, -8, 33, -5, -9, 106, -19, -1, -15, -20, -18, -20, 40, 45, -60, -43, -30, -61, -15, 14, -18, 42, 44, 28,
    30, 3, 87, 16, 34, -54, 2, -73, -47, 0, 69, 8, 12, -28, 14, 42, 34, 100, 22, -26, 7, 8, 38, 12, 3, 2, 13, -42, 6, 40, 78, -59,
    -22, -61, 126, -20, -87, 117, -24, 59, 13, 42, -27, 11, 81, 111, -44, 78, -20, -2, -20, 71, -52, -16, 39, -79, 33, 37, -78, 33, 117, -50, -26, 8,
    20, 17, 0, 33, 29, -50, -1, 1, 19, 29, -7, -30, 107, -56, -43, 30, 68, 21, -76, -126, 31, -38, 63, -8, -4, -46, 22, 74, 9, -45, -12, -26,
    29, -84, 9, 85, -41, -45, 34, 18, 20, -19, 3, 49, -85, -84, -16, -63, 73, -37, -22, -43, -14, -33, 0, 53, 20, 0, -97, -88, 30, -3, -42, -21};

std::vector<float> q_bias = {
    0.56812152, -0.93159127, 0.37347763, 0.01742499, -0.79943047, 0.83516314, -0.75037457, -0.70365498,
    -0.91750024, 1.36603686, -0.84870335, -0.69661697, 1.40185406, -0.88999083, -0.89134661, -0.01998683,
    -1.53934384, 0.17910243, 0.4898576, -0.06137678, -0.22672028, -0.42689081, -0.52441055, 1.09613571,
    -1.45498523, -0.34448372, 0.9646739, -1.38102483, -1.58587776, -1.33207606, -0.7396143, 0.96477703};

std::vector<float> k_bias = {
    -2.20280903, -0.05419417, -0.80431532, 0.41885196, -1.27104205, 2.37602807, -0.25578841, -0.60591806,
    0.01632502, -1.55325802, 0.01110383, -0.12697178, -0.0347952, -2.50205453, 0.96393239, -0.22315037,
    -0.15879926, 0.40335309, -1.7192705, -1.43097269, 0.39843802, -2.5089159, -0.47062977, -0.22839554,
    -0.37257867, -0.10838287, 2.29266156, -0.59697905, -0.38676052, 1.41732473, -0.82260508, -0.33953844};

std::vector<float> v_bias = {
    -1.09796076, -0.68060071, -0.63444003, -0.20227112, 0.52544346, 0.77986124, -0.0227921, -0.68866844,
    0.31050645, -0.00493497, -1.33924073, -0.04587929, -0.9137049, 0.52107386, -0.03436074, 0.27366015,
    -0.31264704, -0.58064733, -0.53333153, 0.48582772, 0.261758, -0.13447431, -0.33047441, -0.318419,
    0.18622515, 1.02542924, 0.61471327, 0.61037669, -0.84732684, -0.59929309, 0.29929516, 0.29738653};

float qlayer_scale = 0.14810996;
float klayer_scale = 0.21405006;
float vlayer_scale = 0.1608924;

float qk_scale = 3.65741306;
float probs_scale = 0.00793651;
float attn_out_scale = 0.15961547;

std::vector<int8_t> attn_out_q8 = {
   -99,   47,  -57,   69,   22,  -51,   -7,   75,    9,  -38,   86,    2,  -17,  -29,    0,   -1,  -23,  -34,  -16,   27,   41,   14,  -29,   -1,   25,    0,   -8,    0,  -57,    2,   -2,   -1,
    13,   -9,   -9,   47,   31,   35,  -23,   -5,   -9,   24,    5,   46,   -5,  -71,  -33,   38,  -45,    0,  -25,   66,  -51,  -27,   57,  -12,   -6,    1,  109,   26,  -45,   17,   35,  -17,
   -14,  -39,   -4,   -5,   21,  -46,   36,   24,  -28,   20,   -8,  -19,   18,  -37,  -30,  -35,  -44,  -66,  -44, -113,   63,    3,   11,   39,   74,   79,  -16,  -60,  -30,  -76,    6,  -51,
    -1,   -2,  -52,   14,   54,  -33,    0,  -17,  -27,  -79,    0,  -33,   32,   21,  -26,   -2,  -22,  -59,    2,  -50,   -5,    4,  -50,  -54,    7,  -23,  112,  -55,  -94, -107,   42,   44,
    -8,    7,  -34,   13,   47,  -34,    2,  -23,  -16,  -74,   -9,  -40,   31,   16,  -39,   -1,   47,   23,   35,    4,    0,    9,   22,    1,   60,  -27,  -35,   82,  -67,   17,   38,   21,
    13,   -9,   -9,   47,   31,   35,  -23,   -5,   -9,   24,    5,   46,   -5,  -71,  -33,   38,  -44,  -70,  -27,   19,    9, -110,   -2,   22,   26,   40,   23,    9,  -87,   -5,    7,   15,
    64,  -11,    3,   12,   -7,  125,    8,  -27,   21,   52,  -52,   62,   26,  -64,  -51,   45,  -23,  -34,  -16,   27,   41,   14,  -29,   -1,   25,    0,   -8,    0,  -57,    2,   -2,   -1,
   -14,  -39,   -4,   -5,   21,  -46,   36,   24,  -28,   20,   -8,  -19,   18,  -37,  -30,  -35,  -43,   -2,  -25,   63,  -43,  -24,   49,  -11,   -4,    1,   98,   24,  -46,   16,   32,  -16,
    65,  -12,    4,   13,   -8,  126,    9,  -28,   22,   53,  -53,   63,   26,  -65,  -52,   45,  -21,  -59,    2,  -49,   -5,    4,  -50,  -55,    6,  -24,  113,  -55,  -95, -108,   42,   45,
    13,   -9,   -9,   47,   31,   35,  -23,   -5,   -9,   24,    5,   46,   -5,  -71,  -33,   38,  -45,    0,  -25,   66,  -51,  -27,   57,  -12,   -6,    1,  109,   26,  -45,   17,   35,  -17,
   -99,   47,  -57,   69,   22,  -51,   -7,   75,    9,  -38,   86,    2,  -17,  -29,    0,   -1,  -21,  -59,    2,  -49,   -5,    4,  -50,  -55,    6,  -24,  113,  -55,  -95, -108,   42,   45,
    16,    0,  -10,   17,    3,   55,   10,   -9,   12,   20,  -19,   30,    9,  -38,  -21,   17,  -45,    1,  -27,   62,  -49,  -28,   56,  -11,   -4,    2,  100,   24,  -44,   15,   31,  -17,
    16,    0,  -10,   17,    3,   55,   10,   -9,   12,   20,  -19,   30,    9,  -38,  -21,   17,  -45,    1,  -27,   62,  -49,  -28,   56,  -11,   -4,    2,  100,   24,  -44,   15,   31,  -17,
    16,    0,  -10,   17,    3,   55,   10,   -9,   12,   20,  -19,   30,    9,  -38,  -21,   17,  -45,    1,  -27,   62,  -49,  -28,   56,  -11,   -4,    2,  100,   24,  -44,   15,   31,  -17,
    16,    0,  -10,   17,    3,   55,   10,   -9,   12,   20,  -19,   30,    9,  -38,  -21,   17,  -45,    1,  -27,   62,  -49,  -28,   56,  -11,   -4,    2,  100,   24,  -44,   15,   31,  -17,
    16,    0,  -10,   17,    3,   55,   10,   -9,   12,   20,  -19,   30,    9,  -38,  -21,   17,  -45,    1,  -27,   62,  -49,  -28,   56,  -11,   -4,    2,  100,   24,  -44,   15,   31,  -17
};

TEST(QOrderedTest, Attention_WithData_ROW_ORDER) {
  OpTester test_qorder("QOrderedAttention", 1, onnxruntime::kMSDomain);
  test_qorder.AddAttribute("order_input", (int64_t)ORDER_ROW);
  test_qorder.AddAttribute("order_output", (int64_t)ORDER_ROW);
  test_qorder.AddAttribute("order_weight", (int64_t)ORDER_COL);
  test_qorder.AddAttribute("num_heads", (int64_t)num_heads);
  std::vector<int64_t> qkv_hidden_size(3, (int64_t)num_heads * head_size);
  test_qorder.AddAttribute("qkv_hidden_sizes", qkv_hidden_size);

  test_qorder.AddInput<int8_t>("input", {batch_size, sequence_len, input_hidden_size}, inputq);
  test_qorder.AddInput<float>("scale_input", {}, {input_scale}, true);
  test_qorder.AddInput<float>("scale_Q_gemm", {}, {qlayer_scale}, true);
  test_qorder.AddInput<float>("scale_K_gemm", {}, {klayer_scale}, true);
  test_qorder.AddInput<float>("scale_V_gemm", {}, {vlayer_scale}, true);
  test_qorder.AddInput<int8_t>("Q_weight", {input_hidden_size, hidden_size}, weightq, true);
  test_qorder.AddInput<int8_t>("K_weight", {input_hidden_size, hidden_size}, weightk, true);
  test_qorder.AddInput<int8_t>("V_weight", {input_hidden_size, hidden_size}, weightv, true);
  test_qorder.AddInput<float>("scale_Q_weight", {hidden_size}, {qw_scale}, true);
  test_qorder.AddInput<float>("scale_K_weight", {hidden_size}, {kw_scale}, true);
  test_qorder.AddInput<float>("scale_V_weight", {hidden_size}, {vw_scale}, true);
  test_qorder.AddInput<float>("Q_bias", {hidden_size}, q_bias, true);
  test_qorder.AddInput<float>("K_bias", {hidden_size}, k_bias, true);
  test_qorder.AddInput<float>("V_bias", {hidden_size}, v_bias, true);
  test_qorder.AddInput<float>("scale_QKT_gemm", {}, {qk_scale}, true);
  test_qorder.AddInput<float>("scale_QKT_softmax", {}, {probs_scale}, true);
  test_qorder.AddInput<float>("scale_values_gemm", {}, {attn_out_scale}, true);
  test_qorder.AddInput<int32_t>("mask_index", {batch_size, sequence_len}, input_mask);
  test_qorder.AddOptionalInputEdge<int8_t>(); //past
  test_qorder.AddOptionalInputEdge<float>(); //extra_add

  test_qorder.AddOutput<int8_t>("output", {batch_size, sequence_len, hidden_size}, attn_out_q8);

  std::vector<std::unique_ptr<IExecutionProvider>> execution_providers;
  execution_providers.push_back( DefaultCudaExecutionProvider() );
  test_qorder.Run(OpTester::ExpectResult::kExpectSuccess, "", {}, nullptr, &execution_providers);
}

}  // namespace test
}  // namespace onnxruntime
