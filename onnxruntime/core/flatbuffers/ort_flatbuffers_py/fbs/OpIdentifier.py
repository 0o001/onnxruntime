# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# see corresponding type in onnxruntime/core/graph/op_identifier.h
class OpIdentifier(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOpIdentifier(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpIdentifier()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def OpIdentifierBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x54\x4D", size_prefixed=size_prefixed)

    # OpIdentifier
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpIdentifier
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpIdentifier
    def OpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpIdentifier
    def SinceVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def OpIdentifierStart(builder): builder.StartObject(3)
def OpIdentifierAddDomain(builder, domain): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)
def OpIdentifierAddOpType(builder, opType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(opType), 0)
def OpIdentifierAddSinceVersion(builder, sinceVersion): builder.PrependInt32Slot(2, sinceVersion, 0)
def OpIdentifierEnd(builder): return builder.EndObject()
