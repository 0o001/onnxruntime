# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpIdAndEpType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOpIdAndEpType(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpIdAndEpType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def OpIdAndEpTypeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x54\x4D", size_prefixed=size_prefixed)

    # OpIdAndEpType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpIdAndEpType
    def OpId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpIdAndEpType
    def ExecutionProviderType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OpIdAndEpTypeStart(builder): builder.StartObject(4)
def OpIdAndEpTypeAddOpId(builder, opId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(opId), 0)
def OpIdAndEpTypeAddExecutionProviderType(builder, executionProviderType): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(executionProviderType), 0)
def OpIdAndEpTypeEnd(builder): return builder.EndObject()
