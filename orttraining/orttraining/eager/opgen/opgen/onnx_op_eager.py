# AUTO-GENERATED CODE! - DO NOT EDIT!
# $ python onnxgen.py

from opgen.onnxops import *

ops = {
    'Abs': Abs('X'),
    'Acos': Acos('input'),
    'Acosh': Acosh('input'),
    'Adagrad': Adagrad('R','T','inputs',decay_factor='decay_factor',epsilon='epsilon',norm_coefficient='norm_coefficient'),
    'Adam': Adam('R','T','inputs',alpha='alpha',beta='beta',epsilon='epsilon',norm_coefficient='norm_coefficient',norm_coefficient_post='norm_coefficient_post'),
    'Add': Add('A','B'),
    'And': And('A','B'),
    'ArgMax': ArgMax('data',axis='axis',keepdims='keepdims',select_last_index='select_last_index'),
    'ArgMin': ArgMin('data',axis='axis',keepdims='keepdims',select_last_index='select_last_index'),
    'ArrayFeatureExtractor': ArrayFeatureExtractor('X','Y'),
    'Asin': Asin('input'),
    'Asinh': Asinh('input'),
    'Atan': Atan('input'),
    'Atanh': Atanh('input'),
    'Bernoulli': Bernoulli('input',dtype='dtype',seed='seed'),
    'Binarizer': Binarizer('X',threshold='threshold'),
    'Cast': Cast('input',to='to'),
    'CastLike': CastLike('input','target_type'),
    'Ceil': Ceil('X'),
    'Celu': Celu('X',alpha='alpha'),
    'Clip': Clip('input','min','max'),
    'Compress': Compress('input','condition',axis='axis'),
    'Concat': Concat('inputs',axis='axis'),
    'ConcatFromSequence': ConcatFromSequence('input_sequence',axis='axis',new_axis='new_axis'),
    'Cos': Cos('input'),
    'Cosh': Cosh('input'),
    'CumSum': CumSum('x','axis',exclusive='exclusive',reverse='reverse'),
    'DequantizeLinear': DequantizeLinear('x','x_scale','x_zero_point',axis='axis'),
    'Det': Det('X'),
    'Div': Div('A','B'),
    'Elu': Elu('X',alpha='alpha'),
    'Equal': Equal('A','B'),
    'Erf': Erf('input'),
    'Exp': Exp('input'),
    'Expand': Expand('input','shape'),
    'EyeLike': EyeLike('input',dtype='dtype',k='k'),
    'Flatten': Flatten('input',axis='axis'),
    'Floor': Floor('X'),
    'Gather': Gather('data','indices',axis='axis'),
    'GatherElements': GatherElements('data','indices',axis='axis'),
    'GatherND': GatherND('data','indices',batch_dims='batch_dims'),
    'Gemm': Gemm('A','B','C',alpha='alpha',beta='beta',transA='transA',transB='transB'),
    'GlobalAveragePool': GlobalAveragePool('X'),
    'GlobalLpPool': GlobalLpPool('X',p='p'),
    'GlobalMaxPool': GlobalMaxPool('X'),
    'Greater': Greater('A','B'),
    'GreaterOrEqual': GreaterOrEqual('A','B'),
    'Hardmax': Hardmax('input',axis='axis'),
    'HardSigmoid': HardSigmoid('X',alpha='alpha',beta='beta'),
    'HardSwish': HardSwish('X'),
    'Identity': Identity('input'),
    'InstanceNormalization': InstanceNormalization('input','scale','B',epsilon='epsilon'),
    'IsInf': IsInf('X',detect_negative='detect_negative',detect_positive='detect_positive'),
    'IsNaN': IsNaN('X'),
    'LeakyRelu': LeakyRelu('X',alpha='alpha'),
    'Less': Less('A','B'),
    'LessOrEqual': LessOrEqual('A','B'),
    'Log': Log('input'),
    'LogSoftmax': LogSoftmax('input',axis='axis'),
    'LpNormalization': LpNormalization('input',axis='axis',p='p'),
    'LRN': LRN('X',alpha='alpha',beta='beta',bias='bias',size='size'),
    'MatMul': MatMul('A','B'),
    'MatMulInteger': MatMulInteger('A','B','a_zero_point','b_zero_point'),
    'Max': Max('data_0'),
    'Mean': Mean('data_0'),
    'Min': Min('data_0'),
    'Mod': Mod('A','B',fmod='fmod'),
    'Mul': Mul('A','B'),
    'Multinomial': Multinomial('input',dtype='dtype',sample_size='sample_size',seed='seed'),
    'Neg': Neg('X'),
    'NonMaxSuppression': NonMaxSuppression('boxes','scores','max_output_boxes_per_class','iou_threshold','score_threshold',center_point_box='center_point_box'),
    'NonZero': NonZero('X'),
    'Not': Not('X'),
    'OneHot': OneHot('indices','depth','values',axis='axis'),
    'OptionalGetElement': OptionalGetElement('input'),
    'OptionalHasElement': OptionalHasElement('input'),
    'Or': Or('A','B'),
    'Pow': Pow('X','Y'),
    'PRelu': PRelu('X','slope'),
    'QLinearMatMul': QLinearMatMul('a','a_scale','a_zero_point','b','b_scale','b_zero_point','y_scale','y_zero_point'),
    'QuantizeLinear': QuantizeLinear('x','y_scale','y_zero_point',axis='axis'),
    'RandomNormalLike': RandomNormalLike('input',dtype='dtype',mean='mean',scale='scale',seed='seed'),
    'RandomUniformLike': RandomUniformLike('input',dtype='dtype',high='high',low='low',seed='seed'),
    'Range': Range('start','limit','delta'),
    'Reciprocal': Reciprocal('X'),
    'ReduceSum': ReduceSum('data','axes',keepdims='keepdims',noop_with_empty_axes='noop_with_empty_axes'),
    'Relu': Relu('X'),
    'Reshape': Reshape('data','shape',allowzero='allowzero'),
    'ReverseSequence': ReverseSequence('input','sequence_lens',batch_axis='batch_axis',time_axis='time_axis'),
    'Round': Round('X'),
    'Scatter': Scatter('data','indices','updates',axis='axis'),
    'ScatterElements': ScatterElements('data','indices','updates',axis='axis'),
    'ScatterND': ScatterND('data','indices','updates'),
    'Selu': Selu('X',alpha='alpha',gamma='gamma'),
    'SequenceAt': SequenceAt('input_sequence','position'),
    'SequenceConstruct': SequenceConstruct('inputs'),
    'SequenceErase': SequenceErase('input_sequence','position'),
    'SequenceInsert': SequenceInsert('input_sequence','tensor','position'),
    'SequenceLength': SequenceLength('input_sequence'),
    'Shape': Shape('data',end='end',start='start'),
    'Shrink': Shrink('input',bias='bias',lambd='lambd'),
    'Sigmoid': Sigmoid('X'),
    'Sign': Sign('input'),
    'Sin': Sin('input'),
    'Sinh': Sinh('input'),
    'Size': Size('data'),
    'Slice': Slice('data','starts','ends','axes','steps'),
    'Softmax': Softmax('input',axis='axis'),
    'Softplus': Softplus('X'),
    'Softsign': Softsign('input'),
    'SpaceToDepth': SpaceToDepth('input',blocksize='blocksize'),
    'Split': Split('input','split',axis='axis'),
    'SplitToSequence': SplitToSequence('input','split',axis='axis',keepdims='keepdims'),
    'Sqrt': Sqrt('X'),
    'Squeeze': Squeeze('data','axes'),
    'Sub': Sub('A','B'),
    'Sum': Sum('data_0'),
    'Tan': Tan('input'),
    'Tanh': Tanh('input'),
    'ThresholdedRelu': ThresholdedRelu('X',alpha='alpha'),
    'Tile': Tile('input','repeats'),
    'Trilu': Trilu('input','k',upper='upper'),
    'Unsqueeze': Unsqueeze('data','axes'),
    'Where': Where('condition','X','Y'),
    'Xor': Xor('A','B'),
}
type_promotion_ops = {}
